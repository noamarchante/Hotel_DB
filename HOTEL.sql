
SET AUTOCOMMIT on;

/***********************************************************************/
/* 1.- Sentencias de borrado de todas las tablas, vistas, funciones,   */
/*     procedimientos y triggers                                       */
/***********************************************************************/

DROP TRIGGER    cuenta_valida;
DROP TRIGGER    cliente_prioritario_cliente;
DROP TRIGGER    cliente_prioritario_empleado;
DROP TRIGGER    min_hotel_cadenaHotelera;

DROP TABLE HOTEL CASCADE CONSTRAINTS;
DROP TABLE EDIFICIO CASCADE CONSTRAINTS;
DROP TABLE HABITACION CASCADE CONSTRAINTS;
DROP TABLE APARTAMENTO CASCADE CONSTRAINTS;
DROP TABLE ESPACIO CASCADE CONSTRAINTS;
DROP TABLE ESPACIO_TRABAJO CASCADE CONSTRAINTS;
DROP TABLE ESPACIO_INSTALACION CASCADE CONSTRAINTS;
DROP TABLE ESPACIO_HOSPEDAJE CASCADE CONSTRAINTS;
DROP TABLE ESPACIO_EN_PLANTA CASCADE CONSTRAINTS;
DROP TABLE PLANTA CASCADE CONSTRAINTS;
DROP TABLE CONTRATO CASCADE CONSTRAINTS;
DROP TABLE APRENDIZ_REALIZA_PRACTICA CASCADE CONSTRAINTS;
DROP TABLE CONTRATO_ASIGNADO_A_EMPLEADO CASCADE CONSTRAINTS;
DROP TABLE APRENDIZ CASCADE CONSTRAINTS;
DROP TABLE EMPLEADO CASCADE CONSTRAINTS;
DROP TABLE PRACTICA CASCADE CONSTRAINTS;
DROP TABLE PERSONA CASCADE CONSTRAINTS;
DROP TABLE HUESPED CASCADE CONSTRAINTS;
DROP TABLE EMPRESA CASCADE CONSTRAINTS;
DROP TABLE AGENCIA CASCADE CONSTRAINTS;
DROP TABLE CLIENTE CASCADE CONSTRAINTS;
DROP TABLE CLIENTE_PRIORITARIO CASCADE CONSTRAINTS;
DROP TABLE CLIENTE_RESERVA_ESP_HOSPEDAJE CASCADE CONSTRAINTS;

DROP VIEW V_NOMBRE_ESPACIO_LUGAR;
DROP VIEW V_PROXIMAS_RESERVAS;

DROP PROCEDURE  CambiarEspacioReservas;
DROP PROCEDURE  ListaEdificiosHotel;
DROP PROCEDURE  EmpleadosAprendices;
DROP PROCEDURE  GenerarFacturaReservas;
DROP FUNCTION   NumClientesEspHospedaje;
DROP FUNCTION   IngresosHotel;
DROP FUNCTION   NumeroDeReservasCliente;

/**************************************************/
/* 2.- Creamos las tablas de nuestro Diagrama EER */
/**************************************************/

CREATE TABLE HOTEL
(
    ID_HOTEL   	    VARCHAR2(6) NOT NULL,
    DIRECCION    	VARCHAR2(40) NOT NULL,
    ESTRELLAS		NUMBER(1) NOT NULL,
    NOMBRE   		VARCHAR2(40) NOT NULL,

        CONSTRAINT PK_HOTEL PRIMARY KEY (ID_HOTEL),
        CONSTRAINT UNIQUE_DIRECCION_H UNIQUE(DIRECCION),
        CONSTRAINT MIN_ESTRELLAS CHECK (ESTRELLAS >= 0)
);

CREATE TABLE EDIFICIO
(
    ID_EDIFICIO         VARCHAR2(6) NOT NULL,
    DIRECCION           VARCHAR2(30) NOT NULL,
    NUM_PLANTAS         NUMBER(2) NOT NULL,
    ANHO_CONSTRUCCION   NUMBER(4),
    ID_HOTEL            VARCHAR2(6) NOT NULL, --ID del hotel al que pertenece.

        CONSTRAINT PK_EDIFICIO PRIMARY KEY (ID_EDIFICIO),
        CONSTRAINT UNIQUE_DIRECCION_E UNIQUE(DIRECCION),
        CONSTRAINT MIN_PLANTAS CHECK (NUM_PLANTAS > 0),
        CONSTRAINT FK_EDIFICIO_HOTEL FOREIGN KEY (ID_HOTEL) REFERENCES HOTEL(ID_HOTEL) ON DELETE CASCADE
        -- Se borra en cascada, y a que un Edificio no puede estar registrado en nuestra
        -- BD si no pertenece a un hotel.
);

CREATE TABLE ESPACIO
(
    ID_ESPACIO   	VARCHAR2(9) NOT NULL,
    NOMBRE   		VARCHAR2(40),
    SUPERFICIE		NUMBER(6,3) NOT NULL,
    ID_HOTEL        VARCHAR2(6) NOT NULL,
    ID_ESPACIO_CONT	VARCHAR2(9), -- ID del espacio contenedor, si existe.

        CONSTRAINT PK_ESPACIO PRIMARY KEY (ID_ESPACIO),
        CONSTRAINT MIN_SUPERFICIE CHECK (SUPERFICIE > 0),
        CONSTRAINT FK_ID_HOTEL FOREIGN KEY (ID_HOTEL) REFERENCES HOTEL(ID_HOTEL) ON DELETE CASCADE
        -- Si se borra un hotel, se borran sus espacios.
);

ALTER TABLE ESPACIO ADD CONSTRAINT FK_ESP_ID_ESPACIO FOREIGN KEY(ID_ESPACIO_CONT) REFERENCES ESPACIO(ID_ESPACIO) ON DELETE SET NULL;
-- Por defecto, si borramos un espacio, sus subespacios
-- se mantienen como "huérfanos".


CREATE TABLE ESPACIO_TRABAJO
(
    ID_ESPACIO   	VARCHAR2(9) NOT NULL,
    TIPO			VARCHAR2(30),

        CONSTRAINT PK_ESPACIO_TRAB PRIMARY KEY (ID_ESPACIO),
        CONSTRAINT FK_ID_ESPACIO_TRAB FOREIGN KEY (ID_ESPACIO) REFERENCES ESPACIO(ID_ESPACIO) ON DELETE CASCADE
        -- Borrado en cascada: Si borramos los datos generales de espacio de un
        -- espacio de trabajo borramos también sus datos concretos.
);

CREATE TABLE ESPACIO_INSTALACION
(
    ID_ESPACIO   		VARCHAR2(9) NOT NULL,
    AFORO			    NUMBER(5),
    HORARIO_ACCESIBLE	VARCHAR2(40),
    ES_EXTERIOR		    NUMBER(1),
    USO_INFANTIL		NUMBER(1),

        CONSTRAINT PK_ESPACIO_INST PRIMARY KEY (ID_ESPACIO),
        CONSTRAINT FK_ID_ESPACIO_INST FOREIGN KEY (ID_ESPACIO) REFERENCES ESPACIO(ID_ESPACIO) ON DELETE CASCADE,
        -- Borrado en cascada: Si borramos los datos generales de espacio de un
        -- espacio de instalación borramos también sus datos concretos.
        CONSTRAINT MIN_AFORO CHECK (AFORO > 0),
        CONSTRAINT BOOL_ES_EXTERIOR CHECK (ES_EXTERIOR IN (0,1)),
        CONSTRAINT BOOL_USO_INFANTIL CHECK (USO_INFANTIL IN (0,1))
);

CREATE TABLE ESPACIO_HOSPEDAJE
(
    ID_ESPACIO          VARCHAR2(9) NOT NULL,
    NUM_BANHOS          NUMBER(2),
    NUM_CAMAS           NUMBER(2) NOT NULL,
    TIENE_TERRAZA       NUMBER(1),
    ADMITE_FUMADORES    NUMBER(1),
    ADMITE_MASCOTAS     NUMBER(1),

        CONSTRAINT PK_ESPACIO_HOSPEDAJE PRIMARY KEY (ID_ESPACIO),
        CONSTRAINT FK_ESPACIO_HOSPEDAJE_ESPACIO FOREIGN KEY (ID_ESPACIO) REFERENCES ESPACIO(ID_ESPACIO) ON DELETE CASCADE,
        -- Borrado en cascada: Si borramos los datos generales de espacio de un
        -- espacio de hospedaje borramos también sus datos concretos.
        CONSTRAINT BOOL_TIENE_TERRAZA CHECK (TIENE_TERRAZA IN (0,1)),
        CONSTRAINT BOOL_ADMITE_FUMADORES CHECK (ADMITE_FUMADORES IN (0,1)),
        CONSTRAINT BOOL_ADMITE_MASCOTAS CHECK (ADMITE_MASCOTAS IN (0,1))
);

CREATE TABLE HABITACION
(
    ID_ESPACIO  VARCHAR2(9) NOT NULL,
    TIPO        VARCHAR2(10),
    ES_SUITE    NUMBER(1),

        CONSTRAINT PK_HABITACION PRIMARY KEY (ID_ESPACIO),
        CONSTRAINT FK_HABITACION_ESPACIO FOREIGN KEY (ID_ESPACIO) REFERENCES ESPACIO_HOSPEDAJE(ID_ESPACIO) ON DELETE CASCADE,
        -- Borrado en cascada: Si borramos los datos generales de espacio de hospedaje
        -- de una habitación borramos también sus datos concretos.
        CONSTRAINT BOOL_ES_SUITE CHECK (ES_SUITE IN (0,1))
);

CREATE TABLE APARTAMENTO
(
    ID_ESPACIO          VARCHAR2(9) NOT NULL,
    TIENE_SALON         NUMBER(1),
    COCINA_ELECTRICA    NUMBER(1),

        CONSTRAINT PK_APARTAMENTO PRIMARY KEY (ID_ESPACIO),
        CONSTRAINT FK_APARTAMENTO_ESPACIO FOREIGN KEY (ID_ESPACIO) REFERENCES ESPACIO_HOSPEDAJE(ID_ESPACIO) ON DELETE CASCADE,
        -- Borrado en cascada: Si borramos los datos generales de espacio de hospedaje
        -- de un apartamento borramos también sus datos concretos.
        CONSTRAINT BOOL_TIENE_SALON CHECK (TIENE_SALON IN (0,1)),
        CONSTRAINT BOOL_COCINA_ELECTRICA CHECK (COCINA_ELECTRICA IN (0,1))
);

CREATE TABLE PLANTA
(
    ID_EDIFICIO     VARCHAR2(6) NOT NULL,
    NUM_PLANTA      NUMBER(2) NOT NULL,
    ACCESIBILIDAD   VARCHAR2(20),

        CONSTRAINT PK_PLANTA PRIMARY KEY (ID_EDIFICIO, NUM_PLANTA),
        CONSTRAINT FK_PLANTA_EDIFICIO FOREIGN KEY (ID_EDIFICIO) REFERENCES EDIFICIO(ID_EDIFICIO) ON DELETE CASCADE
        -- Borrado en cascada: Si borramos un edificio borramos también sus plantas.
);

CREATE TABLE ESPACIO_EN_PLANTA
(
    ID_ESPACIO_EN_PLANTA    VARCHAR2(7) NOT NULL,
    ID_EDIFICIO             VARCHAR2(6) NOT NULL,
    NUM_PLANTA              NUMBER(3) NOT NULL,
    ID_ESPACIO              VARCHAR2(9) NOT NULL,

        CONSTRAINT PK_ESPACIO_EN_PLANTA PRIMARY KEY (ID_ESPACIO_EN_PLANTA),
        CONSTRAINT UNIQUE_ESPACIO_EN_PLANTA UNIQUE (ID_EDIFICIO, NUM_PLANTA, ID_ESPACIO),
        CONSTRAINT FK_ESPACIO_EN_PLANTA_PLANTA FOREIGN KEY (ID_EDIFICIO, NUM_PLANTA) REFERENCES PLANTA(ID_EDIFICIO, NUM_PLANTA) ON DELETE CASCADE,
        CONSTRAINT FK_ESPACIO_EN_PLANTA_ESPACIO FOREIGN KEY (ID_ESPACIO) REFERENCES ESPACIO(ID_ESPACIO) ON DELETE CASCADE
        -- Ambas FK se borran en cascada: Si se borra un espacio o una planta,
        -- se eliminan sus relaciones con los otros.
);

CREATE TABLE CONTRATO
(
    COD_CONTRATO    VARCHAR2(6) NOT NULL,
    NOMBRE          VARCHAR2(40),
    SALARIO         NUMBER(7,2) NOT NULL,
    DESCRIPCION     VARCHAR2(300),

        CONSTRAINT PK_CONTRATO PRIMARY KEY (COD_CONTRATO),
        CONSTRAINT MIN_SALARARIO CHECK (SALARIO >= 500.00)
);

CREATE TABLE PERSONA
(
    NUM_ID              VARCHAR2 (9) NOT NULL,
    NOMBRE              VARCHAR2 (40) NOT NULL,
    TELEFONO            VARCHAR2(31) NOT NULL, --  Incluye Prefijo(hasta 5 dígitos), número (hasta 15) y sufijo(hasta 11).
    FECHA_NACIMIENTO    DATE,

        CONSTRAINT PK_PERSONA PRIMARY KEY (NUM_ID),
        CONSTRAINT UNIQUE_TELEFONO UNIQUE (TELEFONO),
        CONSTRAINT COMP_TELEFONO CHECK (TELEFONO NOT LIKE '%[^0-9]%')
);

CREATE TABLE CLIENTE
(
    ID_CLIENTE              VARCHAR2 (9) NOT NULL, --clave subrogada
    FECHA_PRIMER_CONTRATO   DATE NOT NULL,

        CONSTRAINT PK_CLIENTE PRIMARY KEY (ID_CLIENTE)
);

CREATE TABLE HUESPED
(
    NUM_ID          VARCHAR2(9) NOT NULL,
    ID_CLIENTE      VARCHAR2(9),
    NACIONALIDAD    VARCHAR2(20) NOT NULL,
    NUM_TARJETA     VARCHAR2(19),

        CONSTRAINT PK_HUESPED PRIMARY KEY (NUM_ID),
        CONSTRAINT UNIQUE_NUM_TARJETA UNIQUE(NUM_TARJETA),
        CONSTRAINT UNIQUE_ID_CLIENTE_HUESP UNIQUE(ID_CLIENTE),
        CONSTRAINT FK_HUESPED_CLIENTE FOREIGN KEY (ID_CLIENTE) REFERENCES CLIENTE(ID_CLIENTE) ON DELETE SET NULL,
        -- Un huésped puede no ser un cliente, por lo que si borramos sus datos
        -- de cliente, mantendremos los de huésped.
        CONSTRAINT FK_HUESPED_PERSONA FOREIGN KEY (NUM_ID) REFERENCES PERSONA(NUM_ID) ON DELETE CASCADE,
        -- Si borramos los datos de persona, borramos también los de huésped.
        CONSTRAINT MIN_NUM_TARJETA CHECK (NUM_TARJETA NOT LIKE '%[^0-9]%')
);

CREATE TABLE EMPRESA
(
    CIF             VARCHAR2(9) NOT NULL,
    ID_CLIENTE      VARCHAR(9),
    NOMBRE          VARCHAR2(40) NOT NULL,
    NUM_EMPLEADOS   NUMBER(4),

        CONSTRAINT PK_EMPRESA PRIMARY KEY (CIF),
        CONSTRAINT UNIQUE_ID_CLIENTE_EMPR UNIQUE(ID_CLIENTE),
        CONSTRAINT FK_EMPRESA_CLIENTE FOREIGN KEY (ID_CLIENTE) REFERENCES CLIENTE(ID_CLIENTE) ON DELETE SET NULL,
        -- Una empresa puede no ser un cliente, por lo que si borramos sus datos
        -- de cliente, mantendremos los de empresa.
        CONSTRAINT MIN_NUM_EMPLEADOS CHECK (NUM_EMPLEADOS > 0)
);

CREATE TABLE AGENCIA
(
    COD_AGENCIA                 VARCHAR2(9) NOT NULL,
    ID_CLIENTE                  VARCHAR(9),
    NOMBRE                      VARCHAR2(40) NOT NULL,
    FECHA_INICIO_RELACIONES     DATE NOT NULL,

        CONSTRAINT PK_AGENCIA PRIMARY KEY (COD_AGENCIA),
        CONSTRAINT UNIQUE_ID_CLIENTE_AG UNIQUE(ID_CLIENTE),
        CONSTRAINT FK_AGENCIA_CLIENTE FOREIGN KEY (ID_CLIENTE) REFERENCES CLIENTE (ID_CLIENTE) ON DELETE SET NULL
        -- Una agencia puede no ser un cliente, por lo que si borramos sus datos
        -- de cliente, mantendremos los de agencia.
);

CREATE TABLE CLIENTE_RESERVA_ESP_HOSPEDAJE
(
    ID_RESERVA      VARCHAR2(20) NOT NULL,
    ID_CLIENTE      VARCHAR2(9) NOT NULL,
    ID_ESPACIO      VARCHAR2(9) NOT NULL,
    FECHA_RESERVA   DATE NOT NULL,
    FECHA_ENTRADA   DATE NOT NULL,
    FECHA_SALIDA    DATE NOT NULL,
    PRECIO          NUMBER(8,2),
    NOCHES          NUMBER(3) AS (FECHA_SALIDA-FECHA_ENTRADA) NOT NULL,

        CONSTRAINT PK_CREH PRIMARY KEY (ID_RESERVA),
        CONSTRAINT UNIQUE_CREH_CLIENTE_ESPACIO UNIQUE(ID_CLIENTE, ID_ESPACIO, FECHA_ENTRADA),
        CONSTRAINT FK_CREH_CLIENTE FOREIGN KEY (ID_CLIENTE) REFERENCES CLIENTE (ID_CLIENTE) ON DELETE CASCADE,
        CONSTRAINT FK_CREH_ESPACIO FOREIGN KEY (ID_ESPACIO) REFERENCES ESPACIO_HOSPEDAJE(ID_ESPACIO) ON DELETE CASCADE,
        -- Si se borran el espacio reservado o el cliente que reserva, se borra la reserva en cascada.
        CONSTRAINT MIN_NOCHES CHECK (NOCHES > 0),
        CONSTRAINT MIN_PRECIO CHECK (PRECIO > 10),
        CONSTRAINT FECHAS_ESTANCIA CHECK (FECHA_SALIDA > FECHA_ENTRADA),
        CONSTRAINT MAX_FECHA_RESERVA CHECK (FECHA_RESERVA < FECHA_ENTRADA)
);

CREATE TABLE APRENDIZ
(
    NUM_ID          VARCHAR2 (9) NOT NULL,
    FECHA_INGRESO   DATE,

        CONSTRAINT PK_APRENDIZ PRIMARY KEY (NUM_ID),
        CONSTRAINT FK_APRENDIZ_PERSONA FOREIGN KEY (NUM_ID) REFERENCES PERSONA(NUM_ID) ON DELETE CASCADE
        -- Borra en cascada: un aprendiz debe ser una persona.
);

CREATE TABLE PRACTICA
(
    ID_PRACTICA         VARCHAR2(3) NOT NULL,
    NOMBRE              VARCHAR2(40) NOT NULL,
    HORAS_TOTALES       NUMBER(4, 1) NOT NULL,
    DESCRIPCION         VARCHAR2(300),

        CONSTRAINT PK_PRACTICA PRIMARY KEY (ID_PRACTICA),
        CONSTRAINT MIN_HORAS_TOTALES CHECK (HORAS_TOTALES > 0)
);

CREATE TABLE APRENDIZ_REALIZA_PRACTICA
(
    ID_APRENDIZ_PRACTICA    VARCHAR2(12) NOT NULL,
    NUM_ID_APRENDIZ         VARCHAR2(9) NOT NULL,
    ID_PRACTICA             VARCHAR2(3) NOT NULL,
    HORAS_REALIZADAS        NUMBER(7,2) NOT NULL,

        CONSTRAINT PK_APR_REALIZA_PRAC PRIMARY KEY (ID_APRENDIZ_PRACTICA),
        CONSTRAINT UNIQUE_ID_APRENDIZ_PRACTICA UNIQUE(NUM_ID_APRENDIZ, ID_PRACTICA),
        CONSTRAINT FK_APR_REALIZA_PRAC_APRENDIZ FOREIGN KEY (NUM_ID_APRENDIZ) REFERENCES APRENDIZ(NUM_ID) ON DELETE CASCADE,
        CONSTRAINT FK_APR_REALIZA_PRAC_PRACTICA FOREIGN KEY (ID_PRACTICA) REFERENCES PRACTICA(ID_PRACTICA) ON DELETE CASCADE,
        -- Si se borran el aprendiz o la práctica realizada, se borra la relación en cascada.
        CONSTRAINT MIN_HORAS_REALIZADAS CHECK (HORAS_REALIZADAS >= 0)
);

CREATE TABLE EMPLEADO
(
    NUM_ID                  VARCHAR2(9) NOT NULL,
    ESPECIALIDAD            VARCHAR2(20),
    CUENTA_BANCO            VARCHAR2(24) NOT NULL,
    ANHOS_EXPERIENCIA       NUMBER(2),
    ID_HOTEL                VARCHAR(6) NOT NULL,
    ID_PRACTICA_SUPERVISADA VARCHAR2(12),

        CONSTRAINT PK_EMPLEADO PRIMARY KEY (NUM_ID),
        CONSTRAINT FK_EMPLEADO_PERSONA FOREIGN KEY (NUM_ID) REFERENCES PERSONA(NUM_ID) ON DELETE CASCADE,
        CONSTRAINT FK_EMPLEADO_HOTEL FOREIGN KEY (ID_HOTEL) REFERENCES HOTEL(ID_HOTEL) ON DELETE CASCADE,
        -- Las dos FK anteriores borran en cascada, ya que un empleado debe ser una
        -- persona y debe estar asignado a un hotel.
        CONSTRAINT FK_EMPLEADO_PRACTICA FOREIGN KEY (ID_PRACTICA_SUPERVISADA) REFERENCES APRENDIZ_REALIZA_PRACTICA(ID_APRENDIZ_PRACTICA) ON DELETE SET NULL,
        -- Si se borra la relación práctica-aprendiz que está supervisando un empleado, su FK pasa a ser null.
        CONSTRAINT MIN_EXP CHECK (ANHOS_EXPERIENCIA >= 0)
);

CREATE TABLE CONTRATO_ASIGNADO_A_EMPLEADO
(
    ID_CONTRATO_EMPLEADO    VARCHAR2(12) NOT NULL,
    COD_CONTRATO            VARCHAR2(6) NOT NULL,
    NUM_ID_EMPLEADO         VARCHAR2(9) NOT NULL,
    FECHA_INICIO            DATE NOT NULL,
    FECHA_FIN               DATE,

        CONSTRAINT PK_ID_CONTRATO_EMPLEADO PRIMARY KEY (ID_CONTRATO_EMPLEADO),
        CONSTRAINT UNIQUE_ID_CONTRATO_EMPLEADO UNIQUE(COD_CONTRATO, NUM_ID_EMPLEADO, FECHA_INICIO),
        CONSTRAINT FK_COD_CONTRATO FOREIGN KEY (COD_CONTRATO) REFERENCES CONTRATO(COD_CONTRATO) ON DELETE CASCADE,
        CONSTRAINT FK_NUM_ID_EMPLEADO FOREIGN KEY (NUM_ID_EMPLEADO) REFERENCES EMPLEADO(NUM_ID) ON DELETE CASCADE,
        -- Si se elimina el contrato o el empleado relacionados, se elimina la relación.
        CONSTRAINT MIN_FECHA_FIN CHECK (FECHA_FIN > FECHA_INICIO)
);

CREATE TABLE CLIENTE_PRIORITARIO
(
    NUM_ID          VARCHAR2(9) NOT NULL,
    ID_CLIENTE      VARCHAR2(9) NOT NULL,
    RANGO_PRIORIDAD NUMBER(1) NOT NULL,

        CONSTRAINT PK_CLIENTE_PRIOR PRIMARY KEY (NUM_ID, ID_CLIENTE),
        CONSTRAINT FK_CLIENTE_PRIOR_EMPLEADO FOREIGN KEY (NUM_ID) REFERENCES EMPLEADO(NUM_ID) ON DELETE CASCADE,
        CONSTRAINT FK_CLIENTE_PRIOR_CLIENTE FOREIGN KEY (ID_CLIENTE) REFERENCES CLIENTE (ID_CLIENTE) ON DELETE CASCADE,
        -- Si se borran los datos de la persona como cliente o como empleado,
        -- ya no es un cliente prioritario y se borran estos datos también.
        CONSTRAINT MIN_RANGO_PRIORIDAD CHECK (RANGO_PRIORIDAD >=0)

);


/*******************************************************/
/* 3.- Creamos los índices necesarios sobre las tablas */
/*******************************************************/

CREATE INDEX IND_ESTRELLAS ON HOTEL (ESTRELLAS ASC);

CREATE INDEX IND_ANHOCONST ON EDIFICIO (ANHO_CONSTRUCCION ASC);

CREATE INDEX IND_HOTEL_ESPACIOS ON ESPACIO (ID_HOTEL ASC);

CREATE INDEX IND_ESP_TRAB_TIPO ON ESPACIO_TRABAJO (TIPO ASC);

CREATE INDEX IND_CAMAS ON ESPACIO_HOSPEDAJE (NUM_CAMAS ASC);

CREATE INDEX IND_HAB_TIPO ON HABITACION (TIPO ASC);

CREATE INDEX IND_SALARCONTR ON CONTRATO (SALARIO ASC);

CREATE INDEX IND_FECHA_NAC ON PERSONA (FECHA_NACIMIENTO ASC);

CREATE INDEX IND_FECHA_PRIMER_CONTRATO ON CLIENTE (FECHA_PRIMER_CONTRATO ASC);

CREATE INDEX IND_NACIONALIDAD ON HUESPED (NACIONALIDAD ASC);

CREATE INDEX IND_FECHA_INICIO_REL ON AGENCIA (FECHA_INICIO_RELACIONES ASC);

CREATE INDEX IND_FECHA_ENTRADA ON CLIENTE_RESERVA_ESP_HOSPEDAJE (FECHA_ENTRADA ASC);

CREATE INDEX IND_HORASPRACT ON PRACTICA(HORAS_TOTALES ASC);

CREATE INDEX IND_FECHINGR ON APRENDIZ (FECHA_INGRESO ASC);

CREATE INDEX IND_ANHOS_EXPERIENCIA ON EMPLEADO (ANHOS_EXPERIENCIA ASC);

CREATE INDEX IND_FECHINICIOCONTR ON CONTRATO_ASIGNADO_A_EMPLEADO(FECHA_INICIO ASC);
CREATE INDEX IND_FECHAFINCONTR ON CONTRATO_ASIGNADO_A_EMPLEADO(FECHA_FIN ASC);
CREATE INDEX IND_COD_CONTR ON CONTRATO_ASIGNADO_A_EMPLEADO(COD_CONTRATO ASC);

/************************************************/
/* 4.- Creamos las vistas para nuestra temática */
/************************************************/

-- Vista NO actualizable:
/*
    JUSTIFICACIÓN: Vista que muestra los id y nombres de todos los espacios de la
    cadena hotelera, junto con el edificio y la planta en la que se sitúan. Esta
    vista resulta de utilidad tanto para clientes como empleados, ya que les
    ayuda a encontrar el lugar físico en el que se encuentra un espacio. También
    permite observar la distribución general de los espacios en edificios y plantas.
*/
CREATE OR REPLACE VIEW V_NOMBRE_ESPACIO_LUGAR (ID_ESPACIO, NOMBRE_ESPACIO, DIRECCION_EDIFICIO, NUM_PLANTA) AS
    SELECT ESPACIO.ID_ESPACIO, ESPACIO.NOMBRE, EDIFICIO.DIRECCION, ESPACIO_EN_PLANTA.NUM_PLANTA
    FROM ESPACIO, ESPACIO_EN_PLANTA, EDIFICIO
    WHERE (ESPACIO.ID_ESPACIO = ESPACIO_EN_PLANTA.ID_ESPACIO)
        AND (ESPACIO_EN_PLANTA.ID_EDIFICIO = EDIFICIO.ID_EDIFICIO)
    ORDER BY EDIFICIO.ID_EDIFICIO ASC, ESPACIO_EN_PLANTA.NUM_PLANTA ASC;


-- Vista actualizable:
/*
    JUSTIFICACIÓN: Vista que muestra los id todas las reservas cuya fecha de
    entrada aún no ha llegado, es decir las estancias que aún no han tenido
    lugar, mostrando primero las más próximas. Esta vista facilita el trabajo
    de los empleados, que pueden ver rápidamente cuales son las próximas
    entradas de clientes, ignorando las reservas pasadas.
*/
CREATE OR REPLACE VIEW V_PROXIMAS_RESERVAS (ID_RESERVA, ID_CLIENTE, ID_ESPACIO,
                                            FECHA_RESERVA, FECHA_ENTRADA,
                                            FECHA_SALIDA, PRECIO, NOCHES) AS
  SELECT *
  FROM CLIENTE_RESERVA_ESP_HOSPEDAJE
  WHERE FECHA_ENTRADA > SYSDATE
  ORDER BY FECHA_ENTRADA ASC;

/*********************************************************/
/* 5.- Insertamos datos de ejemplo para todas las tablas */
/*********************************************************/

-- tabla HOTEL
INSERT INTO HOTEL(ID_HOTEL,DIRECCION,ESTRELLAS,NOMBRE) VALUES ('HOU220', 'AVD. OTERO PEDRAYO 10, OURENSE', 5, 'HOTEL LAGO');
INSERT INTO HOTEL(ID_HOTEL,DIRECCION,ESTRELLAS,NOMBRE) VALUES ('HCO152', 'AVD. BUENOS AIRES 23, A CORUÑA', 2, 'HOTEL PARAÍSO');
INSERT INTO HOTEL(ID_HOTEL,DIRECCION,ESTRELLAS,NOMBRE) VALUES ('HLU041', 'RÚA DO PROGRESO, LUGO', 5, 'HOTEL MILAGROS');

-- tabla EDIFICIO
INSERT INTO EDIFICIO (ID_EDIFICIO, DIRECCION, NUM_PLANTAS, ANHO_CONSTRUCCION, ID_HOTEL) VALUES ('EOU220', 'AVD. OTERO PEDRAYO 10, OURENSE', 4, 1960, 'HOU220');
INSERT INTO EDIFICIO (ID_EDIFICIO, DIRECCION, NUM_PLANTAS, ANHO_CONSTRUCCION, ID_HOTEL) VALUES ('EOU230', 'RÚA FRAGOSO 5-7, OURENSE', 2, 1927, 'HOU220');
INSERT INTO EDIFICIO (ID_EDIFICIO, DIRECCION, NUM_PLANTAS, ANHO_CONSTRUCCION, ID_HOTEL) VALUES ('ECO150', 'AVD. BUENOS AIRES, A CORUÑA', 2, 1982, 'HCO152');
INSERT INTO EDIFICIO (ID_EDIFICIO, DIRECCION, NUM_PLANTAS, ANHO_CONSTRUCCION, ID_HOTEL) VALUES ('ECO220', 'RÚA CASTRELOS, LUGO', 11, 1975, 'HCO152');
INSERT INTO EDIFICIO (ID_EDIFICIO, DIRECCION, NUM_PLANTAS, ANHO_CONSTRUCCION, ID_HOTEL) VALUES ('ELU020', 'RÚA DO PROGRESO, LUGO', 14, 2001, 'HLU041');


-- tabla ESPACIO
INSERT INTO ESPACIO(ID_ESPACIO,NOMBRE,SUPERFICIE,ID_HOTEL,ID_ESPACIO_CONT) VALUES ('SOU220101', 'BALNEARIO', 350, 'HOU220', NULL);
INSERT INTO ESPACIO(ID_ESPACIO,NOMBRE,SUPERFICIE,ID_HOTEL,ID_ESPACIO_CONT) VALUES ('SOU220102', 'PISCINA CLIMATIZADA', 150, 'HOU220', 'SOU220101');
INSERT INTO ESPACIO(ID_ESPACIO,NOMBRE,SUPERFICIE,ID_HOTEL,ID_ESPACIO_CONT) VALUES ('SOU220103', 'SALA DEPURADORAS', 30, 'HOU220', 'SOU220101');
INSERT INTO ESPACIO(ID_ESPACIO,NOMBRE,SUPERFICIE,ID_HOTEL,ID_ESPACIO_CONT) VALUES ('SOU220201', 'RESTAURANTE', 400, 'HOU220', NULL);
INSERT INTO ESPACIO(ID_ESPACIO,NOMBRE,SUPERFICIE,ID_HOTEL,ID_ESPACIO_CONT) VALUES ('SOU220202', 'COCINA PRINCIPAL', 75, 'HOU220', 'SOU220101');

INSERT INTO ESPACIO(ID_ESPACIO,NOMBRE,SUPERFICIE,ID_HOTEL,ID_ESPACIO_CONT) VALUES ('SOU220501', 'HABITACION 110', 30, 'HOU220', NULL);
INSERT INTO ESPACIO(ID_ESPACIO,NOMBRE,SUPERFICIE,ID_HOTEL,ID_ESPACIO_CONT) VALUES ('SOU220502', 'SUITE 111', 60, 'HOU220', NULL);
INSERT INTO ESPACIO(ID_ESPACIO,NOMBRE,SUPERFICIE,ID_HOTEL,ID_ESPACIO_CONT) VALUES ('SOU220601', 'APARTAMENTO 210', 70, 'HOU220', NULL);
INSERT INTO ESPACIO(ID_ESPACIO,NOMBRE,SUPERFICIE,ID_HOTEL,ID_ESPACIO_CONT) VALUES ('SOU220602', 'APARTAMENTO 211', 100, 'HOU220', NULL);

-- tabla ESPACIO_TRABAJO
INSERT INTO ESPACIO_TRABAJO(ID_ESPACIO,TIPO) VALUES ('SOU220202', 'COCINA');
INSERT INTO ESPACIO_TRABAJO(ID_ESPACIO,TIPO) VALUES ('SOU220103', 'HIGIENE PISCINA');

-- tabla ESPACIO_INSTALACION
INSERT INTO ESPACIO_INSTALACION(ID_ESPACIO,AFORO,HORARIO_ACCESIBLE,ES_EXTERIOR,USO_INFANTIL) VALUES ('SOU220101', 100, '9.30 - 22.30', 0, 1);
INSERT INTO ESPACIO_INSTALACION(ID_ESPACIO,AFORO,HORARIO_ACCESIBLE,ES_EXTERIOR,USO_INFANTIL) VALUES ('SOU220102', 32, '10.30 - 20.30', 0, 1);
INSERT INTO ESPACIO_INSTALACION(ID_ESPACIO,AFORO,HORARIO_ACCESIBLE,ES_EXTERIOR,USO_INFANTIL) VALUES ('SOU220201', 4343,'13.00 - 16.30 Y 20.30 - 00.30', 0, 1);

-- tabla ESPACIO_HOSPEDAJE
INSERT INTO ESPACIO_HOSPEDAJE (ID_ESPACIO, NUM_BANHOS, NUM_CAMAS, TIENE_TERRAZA, ADMITE_FUMADORES, ADMITE_MASCOTAS) VALUES ('SOU220501', 1, 1, 0, 1, 1);
INSERT INTO ESPACIO_HOSPEDAJE (ID_ESPACIO, NUM_BANHOS, NUM_CAMAS, TIENE_TERRAZA, ADMITE_FUMADORES, ADMITE_MASCOTAS) VALUES ('SOU220502', 2, 3, 1, 0, 1);
INSERT INTO ESPACIO_HOSPEDAJE (ID_ESPACIO, NUM_BANHOS, NUM_CAMAS, TIENE_TERRAZA, ADMITE_FUMADORES, ADMITE_MASCOTAS) VALUES ('SOU220601', 1, 2, 1, 0, 1);
INSERT INTO ESPACIO_HOSPEDAJE (ID_ESPACIO, NUM_BANHOS, NUM_CAMAS, TIENE_TERRAZA, ADMITE_FUMADORES, ADMITE_MASCOTAS) VALUES ('SOU220602', 3, 4, 1, 0, 1);

-- tabla HABITACION
INSERT INTO HABITACION (ID_ESPACIO, TIPO, ES_SUITE) VALUES('SOU220501','INDIVIDUAL', 0);
INSERT INTO HABITACION (ID_ESPACIO, TIPO, ES_SUITE) VALUES('SOU220502','FAMILIAR', 1);

--tabla APARTAMENTO
INSERT INTO APARTAMENTO (ID_ESPACIO, TIENE_SALON, COCINA_ELECTRICA) VALUES ('SOU220601', 1, 0);
INSERT INTO APARTAMENTO (ID_ESPACIO, TIENE_SALON, COCINA_ELECTRICA) VALUES ('SOU220602', 1, 1);

--tabla PLANTA
INSERT INTO PLANTA (ID_EDIFICIO, NUM_PLANTA, ACCESIBILIDAD) VALUES ('EOU220', -1, 'PRIVADA');
INSERT INTO PLANTA (ID_EDIFICIO, NUM_PLANTA, ACCESIBILIDAD) VALUES ('EOU220', 0, 'PÚBLICA');
INSERT INTO PLANTA (ID_EDIFICIO, NUM_PLANTA, ACCESIBILIDAD) VALUES ('EOU220', 1, 'PÚBLICA');
INSERT INTO PLANTA (ID_EDIFICIO, NUM_PLANTA, ACCESIBILIDAD) VALUES ('EOU220', 2, 'PÚBLICA');
INSERT INTO PLANTA (ID_EDIFICIO, NUM_PLANTA, ACCESIBILIDAD) VALUES ('EOU230', -1, 'PRIVADA');
INSERT INTO PLANTA (ID_EDIFICIO, NUM_PLANTA, ACCESIBILIDAD) VALUES ('EOU230', 0, 'PÚBLICA');

--tabla ESPACIO_EN_PLANTA
INSERT INTO ESPACIO_EN_PLANTA(ID_ESPACIO_EN_PLANTA, ID_EDIFICIO, NUM_PLANTA, ID_ESPACIO) VALUES ('SP22001', 'EOU220', 1, 'SOU220501');
INSERT INTO ESPACIO_EN_PLANTA(ID_ESPACIO_EN_PLANTA, ID_EDIFICIO, NUM_PLANTA, ID_ESPACIO) VALUES ('SP22002', 'EOU220',  1, 'SOU220502');
INSERT INTO ESPACIO_EN_PLANTA(ID_ESPACIO_EN_PLANTA, ID_EDIFICIO, NUM_PLANTA, ID_ESPACIO) VALUES ('SP22003', 'EOU220', 2, 'SOU220601');
INSERT INTO ESPACIO_EN_PLANTA(ID_ESPACIO_EN_PLANTA, ID_EDIFICIO, NUM_PLANTA, ID_ESPACIO) VALUES ('SP22004', 'EOU220', 2, 'SOU220602');
INSERT INTO ESPACIO_EN_PLANTA(ID_ESPACIO_EN_PLANTA, ID_EDIFICIO, NUM_PLANTA, ID_ESPACIO) VALUES ('SP22005', 'EOU220', 1, 'SOU220201');
INSERT INTO ESPACIO_EN_PLANTA(ID_ESPACIO_EN_PLANTA, ID_EDIFICIO, NUM_PLANTA, ID_ESPACIO) VALUES ('SP22006', 'EOU220', 2, 'SOU220201');
INSERT INTO ESPACIO_EN_PLANTA(ID_ESPACIO_EN_PLANTA, ID_EDIFICIO, NUM_PLANTA, ID_ESPACIO) VALUES ('SP22007', 'EOU220', 1, 'SOU220202');
INSERT INTO ESPACIO_EN_PLANTA(ID_ESPACIO_EN_PLANTA, ID_EDIFICIO, NUM_PLANTA, ID_ESPACIO) VALUES ('SP23001', 'EOU230', 0, 'SOU220101');
INSERT INTO ESPACIO_EN_PLANTA(ID_ESPACIO_EN_PLANTA, ID_EDIFICIO, NUM_PLANTA, ID_ESPACIO) VALUES ('SP23002', 'EOU230', 0, 'SOU220102');
INSERT INTO ESPACIO_EN_PLANTA(ID_ESPACIO_EN_PLANTA, ID_EDIFICIO, NUM_PLANTA, ID_ESPACIO) VALUES ('SP23003', 'EOU230', -1, 'SOU220103');

-- tabla CONTRATO
INSERT INTO CONTRATO (COD_CONTRATO, NOMBRE, SALARIO, DESCRIPCION) VALUES ('105120', 'LIMPIEZA HABITACIONES JUNIOR', 825.50, 'Acompañado de personal de limpieza senior, desempeñará las labores que estos le indiquen, entre las que figuran: Preparación de camas, limpieza de baños, limpieza de suelos y reposición de productos higiénicos.');
INSERT INTO CONTRATO (COD_CONTRATO, NOMBRE, SALARIO, DESCRIPCION) VALUES ('105121', 'LIMPIEZA HABITACIONES SENIOR', 1300.25, 'Dirige y organiza al personal de limpieza junior. Al menos 4 años de experiencia como junior. Se le asigna la limpieza de espacios de prioridad alta.');
INSERT INTO CONTRATO (COD_CONTRATO, NOMBRE, SALARIO, DESCRIPCION) VALUES ('104920', 'CAMARERÍA JUNIOR', 800.75, 'Acompañado de personal de camarería senior, desempeñará las labores que estos le indiquen, limitadas a: Cobro bajo supervisión, preparación y servicio de bebidas y snacks.');
INSERT INTO CONTRATO (COD_CONTRATO, NOMBRE, SALARIO, DESCRIPCION) VALUES ('104921', 'CAMARERÍA SENIOR', 1400.50, 'Dirige y organiza al personal de camarería junior. Al menos 7 años de experiencia como junior. Se le asigna las tareas urgentes en barra en temporada de alta ocupación');
INSERT INTO CONTRATO (COD_CONTRATO, NOMBRE, SALARIO, DESCRIPCION) VALUES ('101111', 'GERENCIA', 2000, 'Dirige y organiza al personal del hotel. Al menos 10 años de experiencia en el hotel o bajo recomendación');
INSERT INTO CONTRATO (COD_CONTRATO, NOMBRE, SALARIO, DESCRIPCION) VALUES ('101221', 'CHEF', 1800, 'Jefe de cocina, dirige a cocineros y camareros.');

-- tabla PERSONA
INSERT INTO PERSONA(NUM_ID, NOMBRE, TELEFONO, FECHA_NACIMIENTO) VALUES ('20253264A', 'Juan Rodriguez Perez', '683946583', '16/12/1990');
INSERT INTO PERSONA(NUM_ID, NOMBRE, TELEFONO, FECHA_NACIMIENTO) VALUES ('15156224W', 'María Saavedra Gómez', '657543454', '10/09/1997');
INSERT INTO PERSONA(NUM_ID, NOMBRE, TELEFONO, FECHA_NACIMIENTO) VALUES ('65489481B', 'Luisa Fernandez Criado', '765645543', '03/03/1993');
INSERT INTO PERSONA(NUM_ID, NOMBRE, TELEFONO, FECHA_NACIMIENTO) VALUES ('12115514V', 'Marcos Quintas López', '645342343', '17/06/1987');
INSERT INTO PERSONA(NUM_ID, NOMBRE, TELEFONO, FECHA_NACIMIENTO) VALUES ('12122156X', 'Cristina Ferreiro Collazos', '675656545', '17/12/1996');
INSERT INTO PERSONA(NUM_ID, NOMBRE, TELEFONO, FECHA_NACIMIENTO) VALUES ('33225684G', 'Samuel Gonzalez Gonzalez', '633454545', '22/11/1983');
INSERT INTO PERSONA(NUM_ID, NOMBRE, TELEFONO, FECHA_NACIMIENTO) VALUES ('68254566R', 'Juan Manuel Fuentes Macía', '654789876', '24/10/1997');
INSERT INTO PERSONA(NUM_ID, NOMBRE, TELEFONO, FECHA_NACIMIENTO) VALUES ('23465138Z', 'Lorena Diaz Nuñez', '654223234', '13/07/1979');
INSERT INTO PERSONA(NUM_ID, NOMBRE, TELEFONO, FECHA_NACIMIENTO) VALUES ('87921656C', 'Laura Blanco Delgado', '666564534', '23/08/1975');
INSERT INTO PERSONA(NUM_ID, NOMBRE, TELEFONO, FECHA_NACIMIENTO) VALUES ('77643254D', 'Alejandro López Fuentes', '654221234', '04/03/1984');

-- tabla APRENDICES
INSERT INTO APRENDIZ(NUM_ID, FECHA_INGRESO) VALUES ('20253264A', '10/08/2017');
INSERT INTO APRENDIZ(NUM_ID, FECHA_INGRESO) VALUES ('12122156X', '15/06/2017');
INSERT INTO APRENDIZ(NUM_ID, FECHA_INGRESO) VALUES ('33225684G', '17/08/2017');
INSERT INTO APRENDIZ(NUM_ID, FECHA_INGRESO) VALUES ('15156224W', '10/08/2018');
INSERT INTO APRENDIZ(NUM_ID, FECHA_INGRESO) VALUES ('68254566R', '12/09/2018');

-- tabla PRACTICA
INSERT INTO PRACTICA(ID_PRACTICA, NOMBRE, HORAS_TOTALES, DESCRIPCION) VALUES ('115', 'PRACTICAS INTEGRALES BÁSICAS', 120, 'Prácticas genéricas recomendadas a todos los aspirantes a empleos de la cadena. Introducción básica a la mayor parte de las tareas que se realizan en cada hotel.');
INSERT INTO PRACTICA(ID_PRACTICA, NOMBRE, HORAS_TOTALES, DESCRIPCION) VALUES ('116', 'PRACTICAS INTEGRALES AVANZADAS', 240, 'Prácticas genéricas recomendadas a todos los aspirantes a empleos de alto nivel de la cadena. Continúa partiendo de las prácticas básicas (recomendado realizarlas antes), centrándose especialmente en los puestos organizativos y administrativos.');
INSERT INTO PRACTICA(ID_PRACTICA, NOMBRE, HORAS_TOTALES, DESCRIPCION) VALUES ('222', 'HOSTELERÍA: ATENCIÓN AL PÚBLICO', 260, 'Prácticas centradas en el desarrollo de las habilidades del aprendiz a la hora de prestar servicios directos a los clientes, establecer las conversaciones adecuadas y la utilización del vocabulario y expresiones correctas.');
INSERT INTO PRACTICA(ID_PRACTICA, NOMBRE, HORAS_TOTALES, DESCRIPCION) VALUES ('258', 'LIMPIEZA: SERVICIO DE HABITACIONES', 200, 'Prácticas centradas en el desarrollo de las habilidades del aprendiz en la aclimatación de habitaciones y apartamentos en los tiempos estipulados, siguiendo las normas de conducta y técnicas que deba seguir.');

-- tabla APRENDIZ_REALIZA_PRACTICA
INSERT INTO APRENDIZ_REALIZA_PRACTICA(ID_APRENDIZ_PRACTICA, NUM_ID_APRENDIZ, ID_PRACTICA, HORAS_REALIZADAS) VALUES ('R1010', '20253264A', '115', 120);
INSERT INTO APRENDIZ_REALIZA_PRACTICA(ID_APRENDIZ_PRACTICA, NUM_ID_APRENDIZ, ID_PRACTICA, HORAS_REALIZADAS) VALUES ('R1011', '20253264A', '116', 240);
INSERT INTO APRENDIZ_REALIZA_PRACTICA(ID_APRENDIZ_PRACTICA, NUM_ID_APRENDIZ, ID_PRACTICA, HORAS_REALIZADAS) VALUES ('R1012', '20253264A', '222', 240);
INSERT INTO APRENDIZ_REALIZA_PRACTICA(ID_APRENDIZ_PRACTICA, NUM_ID_APRENDIZ, ID_PRACTICA, HORAS_REALIZADAS) VALUES ('R1020', '12122156X', '115', 120);
INSERT INTO APRENDIZ_REALIZA_PRACTICA(ID_APRENDIZ_PRACTICA, NUM_ID_APRENDIZ, ID_PRACTICA, HORAS_REALIZADAS) VALUES ('R1021', '12122156X', '116', 240);
INSERT INTO APRENDIZ_REALIZA_PRACTICA(ID_APRENDIZ_PRACTICA, NUM_ID_APRENDIZ, ID_PRACTICA, HORAS_REALIZADAS) VALUES ('R1022', '12122156X', '258', 12.25);
INSERT INTO APRENDIZ_REALIZA_PRACTICA(ID_APRENDIZ_PRACTICA, NUM_ID_APRENDIZ, ID_PRACTICA, HORAS_REALIZADAS) VALUES ('R2030', '33225684G', '115', 52.25);
INSERT INTO APRENDIZ_REALIZA_PRACTICA(ID_APRENDIZ_PRACTICA, NUM_ID_APRENDIZ, ID_PRACTICA, HORAS_REALIZADAS) VALUES ('R2040', '68254566R', '115', 32.5);

-- tabla EMPLEADO
INSERT INTO EMPLEADO(NUM_ID, ESPECIALIDAD, CUENTA_BANCO, ANHOS_EXPERIENCIA, ID_HOTEL, ID_PRACTICA_SUPERVISADA) VALUES ('20253264A', 'ATENCIÓN AL PÚBLICO', 'ES6621000418401234567891', 2, 'HOU220', NULL);
INSERT INTO EMPLEADO(NUM_ID, ESPECIALIDAD, CUENTA_BANCO, ANHOS_EXPERIENCIA, ID_HOTEL, ID_PRACTICA_SUPERVISADA) VALUES ('15156224W', 'COCINA', 'ES6000491500051234567892', 10, 'HOU220', 'R2040');
INSERT INTO EMPLEADO(NUM_ID, ESPECIALIDAD, CUENTA_BANCO, ANHOS_EXPERIENCIA, ID_HOTEL, ID_PRACTICA_SUPERVISADA) VALUES ('65489481B', 'GERENCIA', 'ES9420805801101234567891', 20, 'HOU220', 'R2030');
INSERT INTO EMPLEADO(NUM_ID, ESPECIALIDAD, CUENTA_BANCO, ANHOS_EXPERIENCIA, ID_HOTEL, ID_PRACTICA_SUPERVISADA) VALUES ('12115514V', 'LIMPIEZA', 'ES9000246912501234567891', 5, 'HOU220', 'R1022');

-- tabla CONTRATO_ASIGNADO_A_EMPLEADO
INSERT INTO CONTRATO_ASIGNADO_A_EMPLEADO(ID_CONTRATO_EMPLEADO, COD_CONTRATO, NUM_ID_EMPLEADO, FECHA_INICIO, FECHA_FIN) VALUES ('C1001', '105120', '12115514V', '25/10/2014', '25/10/2018');
INSERT INTO CONTRATO_ASIGNADO_A_EMPLEADO(ID_CONTRATO_EMPLEADO, COD_CONTRATO, NUM_ID_EMPLEADO, FECHA_INICIO, FECHA_FIN) VALUES ('C1002', '105121', '12115514V', '26/10/2018', '26/10/2020');
INSERT INTO CONTRATO_ASIGNADO_A_EMPLEADO(ID_CONTRATO_EMPLEADO, COD_CONTRATO, NUM_ID_EMPLEADO, FECHA_INICIO, FECHA_FIN) VALUES ('C400', '101111', '65489481B', '15/01/1999', '15/01/2003');
INSERT INTO CONTRATO_ASIGNADO_A_EMPLEADO(ID_CONTRATO_EMPLEADO, COD_CONTRATO, NUM_ID_EMPLEADO, FECHA_INICIO, FECHA_FIN) VALUES ('C401', '101111', '65489481B', '16/01/2003', '15/01/2007');
INSERT INTO CONTRATO_ASIGNADO_A_EMPLEADO(ID_CONTRATO_EMPLEADO, COD_CONTRATO, NUM_ID_EMPLEADO, FECHA_INICIO, FECHA_FIN) VALUES ('C402', '101111', '65489481B', '17/01/2007', '17/01/2016');
INSERT INTO CONTRATO_ASIGNADO_A_EMPLEADO(ID_CONTRATO_EMPLEADO, COD_CONTRATO, NUM_ID_EMPLEADO, FECHA_INICIO, FECHA_FIN) VALUES ('C403', '101111', '65489481B', '18/01/2016', '18/01/2022');
INSERT INTO CONTRATO_ASIGNADO_A_EMPLEADO(ID_CONTRATO_EMPLEADO, COD_CONTRATO, NUM_ID_EMPLEADO, FECHA_INICIO, FECHA_FIN) VALUES ('C2030', '104920', '20253264A', '11/08/2017', '11/08/2020');
INSERT INTO CONTRATO_ASIGNADO_A_EMPLEADO(ID_CONTRATO_EMPLEADO, COD_CONTRATO, NUM_ID_EMPLEADO, FECHA_INICIO, FECHA_FIN) VALUES ('C3030', '101221', '15156224W', '11/02/2009', '11/02/2014');
INSERT INTO CONTRATO_ASIGNADO_A_EMPLEADO(ID_CONTRATO_EMPLEADO, COD_CONTRATO, NUM_ID_EMPLEADO, FECHA_INICIO, FECHA_FIN) VALUES ('C3031', '101221', '15156224W', '12/02/2014', '12/02/2020');

-- tabla CLIENTE
INSERT INTO CLIENTE(ID_CLIENTE, FECHA_PRIMER_CONTRATO) VALUES ('00009856V', '10/10/2008');
INSERT INTO CLIENTE(ID_CLIENTE, FECHA_PRIMER_CONTRATO) VALUES ('65453211S', '29/08/2010');
INSERT INTO CLIENTE(ID_CLIENTE, FECHA_PRIMER_CONTRATO) VALUES ('77643254D', '22/02/2007');
INSERT INTO CLIENTE(ID_CLIENTE, FECHA_PRIMER_CONTRATO) VALUES ('66655789K', '04/06/2000');
INSERT INTO CLIENTE(ID_CLIENTE, FECHA_PRIMER_CONTRATO) VALUES ('67655422W', '01/01/2001');
INSERT INTO CLIENTE(ID_CLIENTE, FECHA_PRIMER_CONTRATO) VALUES ('00984563C', '06/06/2006');
INSERT INTO CLIENTE(ID_CLIENTE, FECHA_PRIMER_CONTRATO) VALUES ('CLI04565', '10/11/2000');
INSERT INTO CLIENTE(ID_CLIENTE, FECHA_PRIMER_CONTRATO) VALUES ('87651208L', '11/11/2011');
INSERT INTO CLIENTE(ID_CLIENTE, FECHA_PRIMER_CONTRATO) VALUES ('09843712A', '04/04/2009');
INSERT INTO CLIENTE(ID_CLIENTE, FECHA_PRIMER_CONTRATO) VALUES ('98888765G', '09/09/2009');
INSERT INTO CLIENTE(ID_CLIENTE, FECHA_PRIMER_CONTRATO) VALUES ('88989564F', '03/05/2005');
INSERT INTO CLIENTE(ID_CLIENTE, FECHA_PRIMER_CONTRATO) VALUES ('87823445L', '08/10/2015');

-- tabla HUESPED
INSERT INTO HUESPED(NUM_ID, ID_CLIENTE, NACIONALIDAD, NUM_TARJETA) VALUES ('23465138Z','CLI04565','España','654734332312898767');
INSERT INTO HUESPED(NUM_ID, ID_CLIENTE, NACIONALIDAD, NUM_TARJETA) VALUES ('87921656C', '65453211S', 'Francia', '657889886543442345');
INSERT INTO HUESPED(NUM_ID, ID_CLIENTE, NACIONALIDAD, NUM_TARJETA) VALUES ('77643254D', '88989564F', 'Alemania', '665574986544323211');

--tabla EMPRESA
INSERT INTO EMPRESA(CIF, ID_CLIENTE, NOMBRE, NUM_EMPLEADOS) VALUES ('67654439N', '66655789K','Abogados López',80);
INSERT INTO EMPRESA(CIF, ID_CLIENTE, NOMBRE, NUM_EMPLEADOS) VALUES ('56667298I', '67655422W', 'Tecnogalia', 105);
INSERT INTO EMPRESA(CIF, ID_CLIENTE, NOMBRE, NUM_EMPLEADOS) VALUES ('67790912X', '00984563C', 'Nike', 900);

--tabla AGENCIA
INSERT INTO AGENCIA(COD_AGENCIA, ID_CLIENTE, NOMBRE, FECHA_INICIO_RELACIONES) VALUES ('76552905K', '09843712A','Viajes corona', '10/11/2000');
INSERT INTO AGENCIA(COD_AGENCIA, ID_CLIENTE, NOMBRE, FECHA_INICIO_RELACIONES) VALUES ('56330016C', '87651208L','Viajes relax', '11/11/2011');
INSERT INTO AGENCIA(COD_AGENCIA, ID_CLIENTE, NOMBRE, FECHA_INICIO_RELACIONES) VALUES ('67803264X', '00009856V', 'Viajes familia', '04/04/2009');

-- tabla CLIENTE_PRIORITARIO
INSERT INTO CLIENTE_PRIORITARIO(NUM_ID, ID_CLIENTE, RANGO_PRIORIDAD) VALUES ('15156224W', '65453211S',1);

--tabla CLIENTE_RESERVA_ESP_HOSPEDAJE
INSERT INTO CLIENTE_RESERVA_ESP_HOSPEDAJE(ID_RESERVA, ID_CLIENTE, ID_ESPACIO, FECHA_RESERVA, FECHA_ENTRADA, FECHA_SALIDA, PRECIO) VALUES ('REOU22021', '66655789K', 'SOU220601', '12/12/2012', '13/12/2012', '15/12/2012', 200);
INSERT INTO CLIENTE_RESERVA_ESP_HOSPEDAJE(ID_RESERVA, ID_CLIENTE, ID_ESPACIO, FECHA_RESERVA, FECHA_ENTRADA, FECHA_SALIDA, PRECIO) VALUES ('REOU22011', 'CLI04565', 'SOU220501', '20/11/2010', '21/11/2010', '30/11/2010', 600);
INSERT INTO CLIENTE_RESERVA_ESP_HOSPEDAJE(ID_RESERVA, ID_CLIENTE, ID_ESPACIO, FECHA_RESERVA, FECHA_ENTRADA, FECHA_SALIDA, PRECIO) VALUES ('REOU22031', '77643254D', 'SOU220502', '04/08/2018', '01/10/2018', '05/10/2018', 800);
INSERT INTO CLIENTE_RESERVA_ESP_HOSPEDAJE(ID_RESERVA, ID_CLIENTE, ID_ESPACIO, FECHA_RESERVA, FECHA_ENTRADA, FECHA_SALIDA, PRECIO) VALUES ('REOU22151', '67655422W', 'SOU220602', '02/02/2018', '03/02/2018', '06/02/2018', 900);
INSERT INTO CLIENTE_RESERVA_ESP_HOSPEDAJE(ID_RESERVA, ID_CLIENTE, ID_ESPACIO, FECHA_RESERVA, FECHA_ENTRADA, FECHA_SALIDA, PRECIO) VALUES ('REOU22121', '66655789K', 'SOU220601', '01/03/2018', '09/03/2018', '12/03/2018', 600);
INSERT INTO CLIENTE_RESERVA_ESP_HOSPEDAJE(ID_RESERVA, ID_CLIENTE, ID_ESPACIO, FECHA_RESERVA, FECHA_ENTRADA, FECHA_SALIDA, PRECIO) VALUES ('REOU22034', '00984563C', 'SOU220602', '02/02/2018', '03/02/2018', '06/02/2018', 900);
INSERT INTO CLIENTE_RESERVA_ESP_HOSPEDAJE(ID_RESERVA, ID_CLIENTE, ID_ESPACIO, FECHA_RESERVA, FECHA_ENTRADA, FECHA_SALIDA, PRECIO) VALUES ('REOU22201', '09843712A', 'SOU220501', '02/02/2018', '03/02/2018', '06/02/2018', 900);
INSERT INTO CLIENTE_RESERVA_ESP_HOSPEDAJE(ID_RESERVA, ID_CLIENTE, ID_ESPACIO, FECHA_RESERVA, FECHA_ENTRADA, FECHA_SALIDA, PRECIO) VALUES ('REOU22401', '87651208L', 'SOU220602', '15/11/2019', '02/01/2020', '15/01/2020', 900);
INSERT INTO CLIENTE_RESERVA_ESP_HOSPEDAJE(ID_RESERVA, ID_CLIENTE, ID_ESPACIO, FECHA_RESERVA, FECHA_ENTRADA, FECHA_SALIDA, PRECIO) VALUES ('REOU22101', '00009856V', 'SOU220602', '10/10/2019', '20/10/2019', '25/10/2019', 900);
INSERT INTO CLIENTE_RESERVA_ESP_HOSPEDAJE(ID_RESERVA, ID_CLIENTE, ID_ESPACIO, FECHA_RESERVA, FECHA_ENTRADA, FECHA_SALIDA, PRECIO) VALUES ('REOU22141', '98888765G', 'SOU220501', '02/09/2019', '01/10/2019', '22/10/2019', 2800);
INSERT INTO CLIENTE_RESERVA_ESP_HOSPEDAJE(ID_RESERVA, ID_CLIENTE, ID_ESPACIO, FECHA_RESERVA, FECHA_ENTRADA, FECHA_SALIDA, PRECIO) VALUES ('REOU22123', '66655789K', 'SOU220602', '11/09/2019', '30/12/2019', '02/01/2020', 800);
INSERT INTO CLIENTE_RESERVA_ESP_HOSPEDAJE(ID_RESERVA, ID_CLIENTE, ID_ESPACIO, FECHA_RESERVA, FECHA_ENTRADA, FECHA_SALIDA, PRECIO) VALUES ('REOU22211', '87823445L', 'SOU220501', '01/10/2019', '09/03/2020', '12/03/2020', 600);

/********************************************/
/* 6.- Incluímos sentencias de comprobación */
/********************************************/

SELECT * FROM HOTEL;
SELECT * FROM EDIFICIO;
SELECT * FROM HABITACION;
SELECT * FROM APARTAMENTO;
SELECT * FROM ESPACIO;
SELECT * FROM ESPACIO_TRABAJO;
SELECT * FROM ESPACIO_INSTALACION;
SELECT * FROM ESPACIO_HOSPEDAJE;
SELECT * FROM ESPACIO_EN_PLANTA;
SELECT * FROM PLANTA;
SELECT * FROM CONTRATO;
SELECT * FROM APRENDIZ_REALIZA_PRACTICA;
SELECT * FROM CONTRATO_ASIGNADO_A_EMPLEADO;
SELECT * FROM APRENDIZ;
SELECT * FROM EMPLEADO;
SELECT * FROM PRACTICA;
SELECT * FROM PERSONA;
SELECT * FROM HUESPED;
SELECT * FROM EMPRESA;
SELECT * FROM AGENCIA;
SELECT * FROM CLIENTE;
SELECT * FROM CLIENTE_PRIORITARIO;
SELECT * FROM CLIENTE_RESERVA_ESP_HOSPEDAJE;

SELECT ANHO_CONSTRUCCION, ID_EDIFICIO, DIRECCION
FROM EDIFICIO
ORDER BY ANHO_CONSTRUCCION;

SELECT AVG(SALARIO)
FROM CONTRATO;

SELECT NOMBRE, CLIENTE.FECHA_PRIMER_CONTRATO
FROM PERSONA, HUESPED, CLIENTE
WHERE (CLIENTE.FECHA_PRIMER_CONTRATO < '01/01/2010')
        AND (HUESPED.ID_CLIENTE = CLIENTE.ID_CLIENTE)
        AND (PERSONA.NUM_ID = HUESPED.NUM_ID)
ORDER BY CLIENTE.FECHA_PRIMER_CONTRATO ASC;


SELECT ID_RESERVA, FECHA_ENTRADA, NOCHES, ID_CLIENTE, PRECIO
FROM V_PROXIMAS_RESERVAS
WHERE FECHA_ENTRADA < '31/12/2019';

UPDATE V_PROXIMAS_RESERVAS
SET FECHA_ENTRADA = '5/12/19', PRECIO = 2215.75
WHERE ID_RESERVA = 'REOU22141';

SELECT ID_RESERVA, FECHA_ENTRADA, NOCHES, ID_CLIENTE, PRECIO
FROM V_PROXIMAS_RESERVAS
WHERE FECHA_ENTRADA < '31/12/2019';

SELECT *
FROM V_NOMBRE_ESPACIO_LUGAR
WHERE DIRECCION_EDIFICIO LIKE '%OURENSE%';


/*****************************************/
/* 7.- Procedimientos y Funciones PL/SQL */
/*****************************************/

/*
    PROCEDIMIENTO: CambiarEspacioReservas
    DESCRIPCIÓN: Recibe un rango de fechas y dos espacios de hospedaje, se
    encarga de sustituir el espacio asignado para aquellas reservas que se
    solapan con dicho rango y son del primer espacio, por el segundo espacio.
*/
CREATE OR REPLACE
PROCEDURE CambiarEspacioReservas(idEspacioActual IN VARCHAR2,
                                 idEspacioNuevo IN VARCHAR2,
                                 fechaInicial IN DATE,
                                 fechaFinal IN DATE)
IS
   regReserva                 CLIENTE_RESERVA_ESP_HOSPEDAJE%ROWTYPE;

   numEspacios                NUMBER;

   RESERVA_NO_ENCONTRADA      EXCEPTION;
   FECHA_INICIO_NO_VALIDA     EXCEPTION;
   ESPACIO_NO_ENCONTRADO      EXCEPTION;

   -- Seleccionaremos todas las tuplas de reservas del espacio indicado, siempre
   -- que la estancia se intersecte - al menos parcialmente - con el rango de
   -- fechas indicado.
   CURSOR C_RESERVA IS
      SELECT *
      FROM CLIENTE_RESERVA_ESP_HOSPEDAJE
      WHERE ID_ESPACIO = idEspacioActual
        AND ((FECHA_ENTRADA BETWEEN fechaInicial AND fechaFinal)
            OR (FECHA_SALIDA BETWEEN fechaInicial AND fechaFinal))
      FOR UPDATE;
BEGIN

   IF fechaInicial > fechaFinal OR fechaInicial < SYSDATE THEN
    RAISE FECHA_INICIO_NO_VALIDA;
   END IF;

   SELECT COUNT(*) INTO numEspacios
      FROM ESPACIO_HOSPEDAJE
      WHERE ID_ESPACIO = idEspacioNuevo;

   IF (numEspacios = 0) THEN
      RAISE ESPACIO_NO_ENCONTRADO;
   END IF;

   SELECT COUNT(*) INTO numEspacios
      FROM ESPACIO_HOSPEDAJE
      WHERE ID_ESPACIO = idEspacioActual;

   IF (numEspacios = 0) THEN
      RAISE ESPACIO_NO_ENCONTRADO;
   END IF;

   DBMS_OUTPUT.PUT_LINE('Reservas del espacio de hospedaje "'
                        || idEspacioActual || '"');
   DBMS_OUTPUT.PUT_LINE('que coinciden con el período del ' || fechaInicial
                        || ' al ' || fechaFinal);
   DBMS_OUTPUT.PUT_LINE('cambiadas al espacio "' || idEspacioNuevo || '":');
   DBMS_OUTPUT.PUT_LINE('');

   OPEN C_RESERVA;

   LOOP
       FETCH C_RESERVA INTO regReserva;
       EXIT WHEN C_RESERVA%NOTFOUND;

       DBMS_OUTPUT.PUT_LINE('Reserva: "' || regReserva.ID_RESERVA || '" del '
                            || regReserva.FECHA_ENTRADA || ' al '
                            || regReserva.FECHA_SALIDA);

       UPDATE CLIENTE_RESERVA_ESP_HOSPEDAJE
       SET ID_ESPACIO = idEspacioNuevo
       WHERE CURRENT OF C_RESERVA;
   END LOOP;

   IF (C_RESERVA%ROWCOUNT = 0) THEN
      RAISE RESERVA_NO_ENCONTRADA;
   END IF;

   CLOSE C_RESERVA;

EXCEPTION
   WHEN RESERVA_NO_ENCONTRADA THEN
      DBMS_OUTPUT.PUT_LINE('MENSAJE PROCEDIMIENTO: No se ha encontrado ninguna reserva que coincida '
                        || 'con el espacio o rango de fechas indicado');
      RAISE;
   WHEN FECHA_INICIO_NO_VALIDA THEN
      DBMS_OUTPUT.PUT_LINE('MENSAJE PROCEDIMIENTO: Rango incorrecto, fecha inicial superior a la final'
                           || ' o superior a la actual.');
      RAISE;
   WHEN ESPACIO_NO_ENCONTRADO THEN
      DBMS_OUTPUT.PUT_LINE('MENSAJE PROCEDIMIENTO: El espacio nuevo o actual de hospedaje indicado no existe.');
      RAISE;
   WHEN OTHERS THEN
      DBMS_OUTPUT.PUT_LINE('MENSAJE PROCEDIMIENTO: Código: ' || SQLCODE);
      RAISE;
END CambiarEspacioReservas;
/
show errors



/*
    PROCEDIMIENTO: ListaEdificiosHotel
    DESCRIPCIÓN: Recibe el id de un hotel, devuelve un listado con información
    de los edificios que pertenecen al hotel indicado, además de una variable
    con el número de edificios que pertenecen a dicho hotel.
*/
CREATE OR REPLACE PROCEDURE ListaEdificiosHotel(idHotel IN VARCHAR2,
                                                numEdificiosHotel OUT NUMBER)
IS
    regEd                   EDIFICIO%ROWTYPE;
    numHotel                NUMBER;
    nombreHotel             HOTEL.NOMBRE%TYPE;

    HOTEL_NO_ENCONTRADO     EXCEPTION;
    EDIFICIO_NO_ENCONTRADO  EXCEPTION;

    CURSOR C_EDIF IS
        SELECT *
        FROM EDIFICIO E
        WHERE E.ID_HOTEL = idHotel;
BEGIN
    SELECT COUNT(*) INTO numHotel
    FROM HOTEL
    WHERE ID_HOTEL = idHotel;

    IF (numHotel = 0) THEN
        RAISE HOTEL_NO_ENCONTRADO;
    END IF;

    SELECT NOMBRE INTO nombreHotel
    FROM HOTEL
    WHERE ID_HOTEL = idHotel;

    OPEN C_EDIF;
    DBMS_OUTPUT.PUT_LINE('EDIFICIOS DEL HOTEL "' || nombreHotel || '":');
    DBMS_OUTPUT.NEW_LINE;

    LOOP
        FETCH C_EDIF INTO regEd;
        EXIT WHEN C_EDIF%NOTFOUND;
        DBMS_OUTPUT.PUT_LINE('  - Edificio en "' || regEd.DIRECCION || '",');
        DBMS_OUTPUT.PUT_LINE('      de ' || regEd.NUM_PLANTAS
        || ' plantas (Año de construcción: ' || regEd.ANHO_CONSTRUCCION
        || ') [ID: ' || regEd.ID_EDIFICIO || ']');
        DBMS_OUTPUT.NEW_LINE;
    END LOOP;

    numEdificiosHotel := C_EDIF%ROWCOUNT;

    IF (numEdificiosHotel = 0) THEN
        RAISE EDIFICIO_NO_ENCONTRADO;
    END IF;

    CLOSE C_EDIF;

EXCEPTION
    WHEN HOTEL_NO_ENCONTRADO THEN
      DBMS_OUTPUT.PUT_LINE('MENSAJE PROCEDIMIENTO: No se ha encontrado el hotel indicado.');
      RAISE;
   WHEN EDIFICIO_NO_ENCONTRADO THEN
      DBMS_OUTPUT.PUT_LINE('MENSAJE PROCEDIMIENTO: No se han encontrado edificios pertenecientes al hotel.');
      RAISE;
   WHEN OTHERS THEN
      DBMS_OUTPUT.PUT_LINE('MENSAJE PROCEDIMIENTO: Código: ' || SQLCODE);
      RAISE;
END ListaEdificiosHotel;
/
show errors


/*
    PROCEDIMIENTO: GenerarFacturaReservas
    DESCRIPCIÓN: Recibe el id de un cliente y un rango de fechas, devuelve una
    factura que contiene las reservas realizadas por dicho cliente y cuya
    fecha de salida está dentro del rango indicado (fecha en la que se realiza
    el cobro). Se incluye el total de la factura y el IVA desglosado.
*/
CREATE OR REPLACE PROCEDURE GenerarFacturaReservas(idCliente IN VARCHAR2,
                                                   fechaInicial IN DATE,
                                                   fechaFinal IN DATE)
IS
    regReserva              CLIENTE_RESERVA_ESP_HOSPEDAJE%ROWTYPE;
    numCliente              NUMBER;
    numReservas             NUMBER;
    total                   NUMBER DEFAULT 0;
    IVA            CONSTANT NUMBER DEFAULT 0.21;

    FECHA_INICIO_NO_VALIDA  EXCEPTION;
    CLIENTE_NO_ENCONTRADO   EXCEPTION;
    RESERVA_NO_ENCONTRADA   EXCEPTION;

    CURSOR C_RESERVA IS
        SELECT *
        FROM CLIENTE_RESERVA_ESP_HOSPEDAJE
        WHERE ID_CLIENTE = idCliente
            AND FECHA_SALIDA BETWEEN fechaInicial AND fechaFinal;
BEGIN

    IF (fechaInicial > fechaFinal) THEN
        RAISE FECHA_INICIO_NO_VALIDA;
    END IF;

    SELECT COUNT(*) INTO numCliente
    FROM CLIENTE
    WHERE ID_CLIENTE = idCliente;

    IF (numCliente = 0) THEN
        RAISE CLIENTE_NO_ENCONTRADO;
    END IF;

    OPEN C_RESERVA;
    DBMS_OUTPUT.PUT_LINE('FECHA: ' || SYSDATE);
    DBMS_OUTPUT.PUT_LINE('FACTURA CLIENTE "' || idCliente || '" del '
                        || fechaInicial || ' al ' || fechaFinal || ':');
    DBMS_OUTPUT.NEW_LINE;
    DBMS_OUTPUT.PUT_LINE('CODRESERVA    FECHARESERVA    ENTRADA     SALIDA  PRECIO(IVA INCLUIDO)');
    DBMS_OUTPUT.PUT_LINE('-------------------------------------------------------------------');
    LOOP
        FETCH C_RESERVA INTO regReserva;
        EXIT WHEN C_RESERVA%NOTFOUND;
        DBMS_OUTPUT.PUT_LINE(regReserva.ID_RESERVA ||'      '||regReserva.FECHA_RESERVA
        ||'       '||regReserva.FECHA_ENTRADA||'    '||regReserva.FECHA_SALIDA
        ||'   '||regReserva.PRECIO||'€');
        DBMS_OUTPUT.PUT_LINE('  ===');
        total := total+regReserva.PRECIO;
    END LOOP;

    IF (C_RESERVA%ROWCOUNT = 0) THEN
        RAISE RESERVA_NO_ENCONTRADA;
    END IF;

    CLOSE C_RESERVA;

    DBMS_OUTPUT.PUT_LINE('------------------------------------------------------------------');
    DBMS_OUTPUT.PUT_LINE('TOTAL A ABONAR (IVA INCLUIDO): ' || total*(1+IVA) || '€');
    DBMS_OUTPUT.PUT_LINE('      IVA: ' || total*IVA || '€');

EXCEPTION
    WHEN FECHA_INICIO_NO_VALIDA THEN
      DBMS_OUTPUT.PUT_LINE('MENSAJE PROCEDIMIENTO: Rango incorrecto, fecha inicial superior a la final.');
      RAISE;
    WHEN CLIENTE_NO_ENCONTRADO THEN
      DBMS_OUTPUT.PUT_LINE('MENSAJE PROCEDIMIENTO: No se ha encontrado el cliente indicado.');
      RAISE;
    WHEN RESERVA_NO_ENCONTRADA THEN
      DBMS_OUTPUT.PUT_LINE('MENSAJE PROCEDIMIENTO: No se han encontrado reservas para cliente en el rango de fechas indicado.');
      RAISE;
    WHEN OTHERS THEN
      DBMS_OUTPUT.PUT_LINE('MENSAJE PROCEDIMIENTO: Código: ' || SQLCODE);
      RAISE;
END GenerarFacturaReservas;
/
show errors


/*
    PROCEDIMIENTO: EmpleadosAprendices
    DESCRIPCIÓN: Recibe el id de un hotel , devuelve un listado de los
    empleados de ese hotel que además son aprendices, también devuelve una
    variable que contiene el número de empleados que cumplen dicha condicón.
*/
CREATE OR REPLACE PROCEDURE EmpleadosAprendices(idHotel IN VARCHAR2,
                                                numEmpleadoAprendiz OUT NUMBER)
IS
    regEmp                  EMPLEADO%ROWTYPE;

    nombreHotel             HOTEL.NOMBRE%TYPE;
    nombreEmp               PERSONA.NOMBRE%TYPE;

    numHotel                NUMBER;

    HOTEL_NO_ENCONTRADO     EXCEPTION;
    NO_EMPLEADOS_APRENDIZ   EXCEPTION;

    CURSOR C_EMPLEADO_APRENDIZ IS
        SELECT E.*
        FROM EMPLEADO E, APRENDIZ A
        WHERE E.ID_HOTEL = idHotel
            AND E.NUM_ID = A.NUM_ID;
BEGIN
    SELECT COUNT(*) INTO numHotel
    FROM HOTEL
    WHERE ID_HOTEL = idHotel;

    IF (numHotel = 0) THEN
        RAISE HOTEL_NO_ENCONTRADO;
    END IF;

    SELECT NOMBRE INTO nombreHotel
    FROM HOTEL
    WHERE ID_HOTEL = idHotel;

    OPEN C_EMPLEADO_APRENDIZ;
    DBMS_OUTPUT.PUT_LINE('EMPLEADOS DEL HOTEL "' || nombreHotel
                        || '" QUE ADEMÁS SON APRENDICES:');
    DBMS_OUTPUT.NEW_LINE;

    LOOP
        FETCH C_EMPLEADO_APRENDIZ INTO regEmp;
        EXIT WHEN C_EMPLEADO_APRENDIZ%NOTFOUND;

        SELECT NOMBRE INTO nombreEmp
        FROM PERSONA
        WHERE NUM_ID = regEmp.NUM_ID;

        DBMS_OUTPUT.PUT_LINE('  - "' || nombreEmp || '",');
        DBMS_OUTPUT.PUT_LINE('      (especialidad en ' || regEmp.ESPECIALIDAD
        || ') [ID: ' || regEmp.NUM_ID || ']');
        DBMS_OUTPUT.NEW_LINE;
    END LOOP;

    numEmpleadoAprendiz := C_EMPLEADO_APRENDIZ%ROWCOUNT;

    IF (numEmpleadoAprendiz = 0) THEN
        RAISE NO_EMPLEADOS_APRENDIZ;
    END IF;

    CLOSE C_EMPLEADO_APRENDIZ;

EXCEPTION
    WHEN HOTEL_NO_ENCONTRADO THEN
      DBMS_OUTPUT.PUT_LINE('MENSAJE PROCEDIMIENTO: No se ha encontrado el hotel indicado.');
      RAISE;
   WHEN NO_EMPLEADOS_APRENDIZ THEN
      DBMS_OUTPUT.PUT_LINE('MENSAJE PROCEDIMIENTO: No hay empleados que sean aprendices en dicho hotel.');
      RAISE;
   WHEN OTHERS THEN
      DBMS_OUTPUT.PUT_LINE('MENSAJE PROCEDIMIENTO: Código: ' || SQLCODE);
      RAISE;
END EmpleadosAprendices;
/
show errors


/*
    FUNCIÓN: NumClientesEspHospedaje
    DESCRIPCIÓN: Recibe el id de un espacio de hospedaje, devuelve el número
    de clientes diferentes que han reservado dicho espacio en algún momento.
*/
CREATE OR REPLACE FUNCTION NumClientesEspHospedaje(idEspacio IN VARCHAR2)
RETURN NUMBER
IS
    numClientes             NUMBER;
    numEspacio              NUMBER;

    ESPACIO_NO_ENCONTRADO   EXCEPTION;

BEGIN
    SELECT COUNT(DISTINCT ID_CLIENTE) INTO numClientes
    FROM CLIENTE_RESERVA_ESP_HOSPEDAJE
    WHERE ID_ESPACIO = idEspacio;

    IF (numClientes = 0) THEN
        SELECT COUNT(*) INTO numEspacio
        FROM ESPACIO_HOSPEDAJE
        WHERE ID_ESPACIO = idEspacio;

        IF (numEspacio = 0) THEN
            RAISE ESPACIO_NO_ENCONTRADO;
        END IF;
    END IF;

    RETURN numClientes;

EXCEPTION
    WHEN ESPACIO_NO_ENCONTRADO THEN
      DBMS_OUTPUT.PUT_LINE('MENSAJE FUNCIÓN: El espacio de hospedaje indicado no existe.');
      RAISE;
   WHEN OTHERS THEN
      DBMS_OUTPUT.PUT_LINE('MENSAJE FUNCIÓN: Código: ' || SQLCODE);
      RAISE;
END NumClientesEspHospedaje;
/
show errors


/*
    FUNCIÓN: IngresosHotel
    DESCRIPCIÓN: Recibe el id de un hotel y un rango de fechas, devuelve los
    ingresos por reservas estimados del hotel durante ese rango, aplicando el
    porcentaje correspondiente a las reservas que no entran completamente en
    el rango marcado.
*/
CREATE OR REPLACE FUNCTION IngresosHotel(idHotel IN VARCHAR2,
                            fechaInicial IN DATE, fechaFinal IN DATE)
RETURN NUMBER
IS
    regReserva                  CLIENTE_RESERVA_ESP_HOSPEDAJE%ROWTYPE;

    precioPorNoche              CLIENTE_RESERVA_ESP_HOSPEDAJE.PRECIO%TYPE;
    numNochesEnRango            NUMBER;
    fechaInicioReservaRango     DATE;
    fechaFinReservaRango        DATE;
    numHotel                    NUMBER;

    ingresos                    NUMBER DEFAULT 0.0;

    FECHA_FINAL_NO_VALIDA       EXCEPTION;
    FECHA_INICIAL_NO_VALIDA     EXCEPTION;
    HOTEL_NO_ENCONTRADO         EXCEPTION;

    CURSOR C_RESERVA IS
        SELECT R.*
        FROM CLIENTE_RESERVA_ESP_HOSPEDAJE R, ESPACIO E
        WHERE E.ID_HOTEL = idHotel AND R.ID_ESPACIO = E.ID_ESPACIO
            AND ((R.FECHA_ENTRADA BETWEEN fechaInicial AND fechaFinal)
                OR (R.FECHA_SALIDA BETWEEN fechaInicial AND fechaFinal));

BEGIN
    IF (fechaInicial > fechaFinal) THEN
        RAISE FECHA_INICIAL_NO_VALIDA;
    END IF;

    IF (fechaFinal > SYSDATE) THEN
        RAISE FECHA_FINAL_NO_VALIDA;
    END IF;

    SELECT COUNT(ID_HOTEL) INTO numHotel
    FROM HOTEL
    WHERE ID_HOTEL = idHotel;

    IF (numHotel = 0) THEN
        RAISE HOTEL_NO_ENCONTRADO;
    END IF;

    OPEN C_RESERVA;

    LOOP
        FETCH C_RESERVA INTO regReserva;
        EXIT WHEN C_RESERVA%NOTFOUND;

        IF (regReserva.FECHA_ENTRADA <= fechaInicial) THEN
            fechaInicioReservaRango := fechaInicial;
        ELSE
            fechaInicioReservaRango := regReserva.FECHA_ENTRADA;
        END IF;

        IF (regReserva.FECHA_SALIDA >= fechaFinal) THEN
            fechaFinReservaRango := fechaFinal;
        ELSE
            fechaFinReservaRango := regReserva.FECHA_SALIDA;
        END IF;

        numNochesEnRango := fechaFinReservaRango - fechaInicioReservaRango;

        precioPorNoche := (1.0*regReserva.PRECIO)/regReserva.NOCHES;

        ingresos := ingresos + numNochesEnRango*precioPorNoche;
    END LOOP;

    RETURN ingresos;

EXCEPTION
   WHEN HOTEL_NO_ENCONTRADO THEN
      DBMS_OUTPUT.PUT_LINE('MENSAJE FUNCIÓN: No se ha encontrado el hotel indicado.');
      RAISE;
   WHEN FECHA_INICIAL_NO_VALIDA THEN
      DBMS_OUTPUT.PUT_LINE('MENSAJE FUNCIÓN: Rango incorrecto, fecha inicial superior a la final.');
      RAISE;
   WHEN FECHA_FINAL_NO_VALIDA THEN
      DBMS_OUTPUT.PUT_LINE('MENSAJE FUNCIÓN: Rango incorrecto, fecha final superior a la actual.');
      RAISE;
   WHEN OTHERS THEN
      DBMS_OUTPUT.PUT_LINE('MENSAJE FUNCIÓN: Código: ' || SQLCODE);
      RAISE;
END IngresosHotel;
/
show errors

/*
    FUNCIÓN: NumeroDeReservasCliente
    DESCRIPCIÓN: Recibe el id de un cliente, devuelve el número de reservas
    que ha realizado el cliente en total.
*/
CREATE OR REPLACE FUNCTION NumeroDeReservasCliente(idCliente IN VARCHAR2)
RETURN NUMBER
IS
    numCliente              NUMBER;
    numeroReservas          NUMBER;

    CLIENTE_NO_ENCONTRADO   EXCEPTION;
    CLIENTE_SIN_RESERVAS    EXCEPTION;

BEGIN
    SELECT COUNT(*) INTO numCliente
    FROM CLIENTE
    WHERE ID_CLIENTE = idCliente;

    IF (numCliente = 0) THEN
      RAISE CLIENTE_NO_ENCONTRADO;
    END IF;

    SELECT COUNT(*) INTO numeroReservas
    FROM CLIENTE_RESERVA_ESP_HOSPEDAJE
    WHERE ID_CLIENTE = idCliente;

    IF (numeroReservas = 0) THEN
      RAISE CLIENTE_SIN_RESERVAS;
    END IF;

    RETURN numeroReservas;

EXCEPTION
    WHEN CLIENTE_NO_ENCONTRADO THEN
      DBMS_OUTPUT.PUT_LINE('MENSAJE FUNCIÓN: No se ha encontrado el cliente indicado.');
      RAISE CLIENTE_NO_ENCONTRADO;
    WHEN CLIENTE_SIN_RESERVAS THEN
      DBMS_OUTPUT.PUT_LINE('MENSAJE FUNCIÓN: El cliente ' || idCliente || ' no tiene reservas');
      RAISE;
    WHEN OTHERS THEN
      DBMS_OUTPUT.PUT_LINE('MENSAJE FUNCIÓN: Código: ' || SQLCODE);
      RAISE;
END NumeroDeReservasCliente;
/
show errors

/***********************/
/* 8.- TRIGGERS PL/SQL */
/***********************/

--Validar Códigos Bancarios
CREATE OR REPLACE TRIGGER cuenta_valida
    AFTER INSERT OR UPDATE OF CUENTA_BANCO ON EMPLEADO
    REFERENCING NEW AS nuevoEmpleado
    FOR EACH ROW
DECLARE
    numIBAN     NUMBER;
    IBAN        NUMBER;
    IBANact     NUMBER;
BEGIN
    numIBAN := TO_NUMBER(concat(SUBSTR(:nuevoEmpleado.CUENTA_BANCO,5), '142800'));
    IBAN := 98-MOD(numIBAN,97);
    IBANact := TO_NUMBER(SUBSTR(:nuevoEmpleado.CUENTA_BANCO,3,2));

    IF (IBANact != IBAN)
    THEN
        Raise_Application_Error(-20007, 'IBAN incorrecto');
    END IF;
END;
/
show errors

--Crear automáticamente cliente prioritario si se crea un huesped que es cliente
-- y empleado
CREATE OR REPLACE TRIGGER cliente_prioritario_cliente
    AFTER INSERT OR UPDATE OF NUM_ID ON HUESPED
    REFERENCING NEW AS nuevoHuesped
    FOR EACH ROW
DECLARE
	RANGOPRIORIDAD      NUMBER DEFAULT 1;
    numEmpleado         NUMBER; --Si hay un empleado con el mismo ID y es cliente, valdrá 1
BEGIN

    SELECT COUNT(*) INTO numEmpleado FROM EMPLEADO E
        WHERE :nuevoHuesped.NUM_ID = E.NUM_ID AND :nuevoHuesped.ID_CLIENTE IS NOT NULL;

	IF (numEmpleado > 0)
    THEN
        INSERT INTO CLIENTE_PRIORITARIO(NUM_ID, ID_CLIENTE, RANGO_PRIORIDAD) VALUES (:nuevoHuesped.NUM_ID, :nuevoHuesped.ID_CLIENTE, RANGOPRIORIDAD);
    END IF;
END;
/
show errors

--Crear automáticamente cliente prioritario si se crea un empleado que es huesped
-- y cliente
CREATE OR REPLACE TRIGGER cliente_prioritario_empleado
    AFTER INSERT ON EMPLEADO
    REFERENCING NEW AS nuevoEmpleado
    FOR EACH ROW
DECLARE
	RANGOPRIORIDAD      NUMBER DEFAULT 1;
    numHuesped          NUMBER; --Si hay un huésped con el mismo ID y es cliente, valdrá 1
    idCliente           HUESPED.NUM_ID%TYPE;
BEGIN

    SELECT COUNT(*) INTO numHuesped FROM HUESPED H
        WHERE :nuevoEmpleado.NUM_ID = H.NUM_ID AND H.ID_CLIENTE IS NOT NULL;

	IF (numHuesped > 0)
    THEN
        SELECT H.ID_CLIENTE INTO idCliente FROM HUESPED H
            WHERE :nuevoEmpleado.NUM_ID = H.NUM_ID AND H.ID_CLIENTE IS NOT NULL;

        INSERT INTO CLIENTE_PRIORITARIO(NUM_ID, ID_CLIENTE, RANGO_PRIORIDAD) VALUES (:nuevoEmpleado.NUM_ID, idCliente, RANGOPRIORIDAD);
    END IF;
END;
/
show errors

-- Impedir que la cadena hotelera se quede sin hoteles.
CREATE OR REPLACE TRIGGER min_hotel_cadenaHotelera
FOR DELETE ON HOTEL
COMPOUND TRIGGER
   numHoteles   NUMBER;
BEFORE STATEMENT IS
BEGIN
   SELECT COUNT(*) INTO numHoteles FROM HOTEL;
END BEFORE STATEMENT;

BEFORE EACH ROW IS
BEGIN
   IF numHoteles > 1 THEN
      numHoteles := NumHoteles - 1;
   ELSE
      Raise_Application_Error(-20008, 'La cadena hotelera tiene que tener al menos un hotel');
   END IF;
END BEFORE EACH ROW;
END;
/
show errors

/********************************************************/
/* 9.- Bloque para prueba de Procedimientos y Funciones */
/********************************************************/

SET SERVEROUTPUT ON
DECLARE
    numEdificiosHotel        NUMBER;
    numEmpleadosAprendiz     NUMBER;
BEGIN
   DBMS_OUTPUT.NEW_LINE;

   BEGIN
    -- Procedimiento CambiarEspacioReservas
      DBMS_OUTPUT.PUT_LINE('======>INICIO PROCEDIMIENTO: CambiarEspacioReservas');
      CambiarEspacioReservas('SOU220602', 'SOU220601',
                             '22/12/2019', '10/01/2020');
      DBMS_OUTPUT.PUT_LINE('======>FIN PROCEDIMIENTO: CambiarEspacioReservas');
      DBMS_OUTPUT.NEW_LINE;
      DBMS_OUTPUT.NEW_LINE;
   EXCEPTION
      WHEN OTHERS THEN
         DBMS_OUTPUT.PUT_LINE('[EXCEPCIÓN]');
         DBMS_OUTPUT.PUT_LINE('[Código]: ' || SQLCODE);
         DBMS_OUTPUT.PUT_LINE('[Mensaje]: ' || SUBSTR(SQLERRM, 11, 100));
   END;

   BEGIN
    -- Procedimiento ListaEdificiosHotel
      DBMS_OUTPUT.PUT_LINE('======>INICIO PROCEDIMIENTO: ListaEdificiosHotel');
      ListaEdificiosHotel('HOU220', numEdificiosHotel);
      DBMS_OUTPUT.NEW_LINE;
      DBMS_OUTPUT.PUT_LINE('    VALOR DE numEdificiosHotel = ' || numEdificiosHotel);
      DBMS_OUTPUT.PUT_LINE('======>FIN PROCEDIMIENTO: ListaEdificiosHotel');
      DBMS_OUTPUT.NEW_LINE;
      DBMS_OUTPUT.NEW_LINE;
   EXCEPTION
      WHEN OTHERS THEN
         DBMS_OUTPUT.PUT_LINE('[EXCEPCIÓN]');
         DBMS_OUTPUT.PUT_LINE('[Código]: ' || SQLCODE);
         DBMS_OUTPUT.PUT_LINE('[Mensaje]: ' || SUBSTR(SQLERRM, 11, 100));
   END;

   BEGIN
    -- Procedimiento GenerarFacturaReservas
      DBMS_OUTPUT.PUT_LINE('======>INICIO PROCEDIMIENTO: GenerarFacturaReservas');
      DBMS_OUTPUT.NEW_LINE;
      GenerarFacturaReservas('66655789K', '01/01/2018', '01/02/2020');
      DBMS_OUTPUT.NEW_LINE;
      DBMS_OUTPUT.PUT_LINE('======>FIN PROCEDIMIENTO: GenerarFacturaReservas');
      DBMS_OUTPUT.NEW_LINE;
      DBMS_OUTPUT.NEW_LINE;
   EXCEPTION
        WHEN OTHERS THEN
            DBMS_OUTPUT.PUT_LINE('[EXCEPCIÓN]');
            DBMS_OUTPUT.PUT_LINE('[Código]: ' || SQLCODE);
            DBMS_OUTPUT.PUT_LINE('[Mensaje]: ' || SUBSTR(SQLERRM, 11, 100));
   END;

   BEGIN
    -- Procedimiento EmpleadosAprendices
      DBMS_OUTPUT.PUT_LINE('======>INICIO PROCEDIMIENTO: EmpleadosAprendices');
      EmpleadosAprendices('HOU220', numEmpleadosAprendiz);
      DBMS_OUTPUT.NEW_LINE;
      DBMS_OUTPUT.PUT_LINE('    VALOR DE numEmpleadosAprendiz = ' || numEmpleadosAprendiz);
      DBMS_OUTPUT.PUT_LINE('======>FIN PROCEDIMIENTO: EmpleadosAprendices');
      DBMS_OUTPUT.NEW_LINE;
      DBMS_OUTPUT.NEW_LINE;
   EXCEPTION
        WHEN OTHERS THEN
            DBMS_OUTPUT.PUT_LINE('[EXCEPCIÓN]');
            DBMS_OUTPUT.PUT_LINE('[Código]: ' || SQLCODE);
            DBMS_OUTPUT.PUT_LINE('[Mensaje]: ' || SUBSTR(SQLERRM, 11, 100));
   END;

   BEGIN
    -- Función: NumClientesEspHospedaje
      DBMS_OUTPUT.PUT_LINE('======>INICIO FUNCIÓN: NumClientesEspHospedaje');
      DBMS_OUTPUT.NEW_LINE;
      DBMS_OUTPUT.PUT_LINE('    Resultado de NumClientesEspHospedaje("SOU220601") = '
                            || NumClientesEspHospedaje('SOU220601'));
      DBMS_OUTPUT.NEW_LINE;
      DBMS_OUTPUT.PUT_LINE('======>FIN FUNCIÓN: ListaEdificiosHotel');
      DBMS_OUTPUT.NEW_LINE;
      DBMS_OUTPUT.NEW_LINE;
   EXCEPTION
      WHEN OTHERS THEN
         DBMS_OUTPUT.PUT_LINE('[EXCEPCIÓN]');
         DBMS_OUTPUT.PUT_LINE('[Código]: ' || SQLCODE);
         DBMS_OUTPUT.PUT_LINE('[Mensaje]: ' || SUBSTR(SQLERRM, 11, 100));
   END;

   BEGIN
    -- Función: IngresosHotel
      DBMS_OUTPUT.PUT_LINE('======>INICIO FUNCIÓN: IngresosHotel');
      DBMS_OUTPUT.NEW_LINE;
      DBMS_OUTPUT.PUT_LINE('    Resultado de IngresosHotel("HOU220", "01/01/2018", "01/01/2019") = '
                            || IngresosHotel('HOU220', '01/01/2018', '01/01/2019'));
   EXCEPTION
      WHEN OTHERS THEN
         DBMS_OUTPUT.PUT_LINE('[EXCEPCIÓN]');
         DBMS_OUTPUT.PUT_LINE('[Código]: ' || SQLCODE);
         DBMS_OUTPUT.PUT_LINE('[Mensaje]: ' || SUBSTR(SQLERRM, 11, 100));
   END;

   BEGIN
    -- Función: IngresosHotel
      DBMS_OUTPUT.NEW_LINE;
      DBMS_OUTPUT.PUT_LINE('    Resultado de IngresosHotel("HOU220", "01/06/2018", "01/01/2019") = '
                            || IngresosHotel('HOU220', '01/06/2018', '01/01/2019'));
   EXCEPTION
        WHEN OTHERS THEN
             DBMS_OUTPUT.PUT_LINE('[EXCEPCIÓN]');
             DBMS_OUTPUT.PUT_LINE('[Código]: ' || SQLCODE);
             DBMS_OUTPUT.PUT_LINE('[Mensaje]: ' || SUBSTR(SQLERRM, 11, 100));
   END;

   BEGIN
    -- Función: IngresosHotel
      DBMS_OUTPUT.NEW_LINE;
      DBMS_OUTPUT.PUT_LINE('    Resultado de IngresosHotel("HOU220", "03/10/2018", "15/10/2019") = '
                            || IngresosHotel('HOU220', '03/10/2018', '15/10/2019'));
   EXCEPTION
        WHEN OTHERS THEN
             DBMS_OUTPUT.PUT_LINE('[EXCEPCIÓN]');
             DBMS_OUTPUT.PUT_LINE('[Código]: ' || SQLCODE);
             DBMS_OUTPUT.PUT_LINE('[Mensaje]: ' || SUBSTR(SQLERRM, 11, 100));
   END;

   BEGIN
    -- Función: IngresosHotel
      DBMS_OUTPUT.NEW_LINE;
      DBMS_OUTPUT.PUT_LINE('    Resultado de IngresosHotel("HOU220", "1/10/2018", "10/11/2019") = '
                            || IngresosHotel('HOU220', '1/10/2018', '10/11/2019'));
      DBMS_OUTPUT.NEW_LINE;
      DBMS_OUTPUT.PUT_LINE('======>FIN FUNCIÓN: IngresosHotel');
      DBMS_OUTPUT.NEW_LINE;
      DBMS_OUTPUT.NEW_LINE;
   EXCEPTION
        WHEN OTHERS THEN
             DBMS_OUTPUT.PUT_LINE('[EXCEPCIÓN]');
             DBMS_OUTPUT.PUT_LINE('[Código]: ' || SQLCODE);
             DBMS_OUTPUT.PUT_LINE('[Mensaje]: ' || SUBSTR(SQLERRM, 11, 100));
   END;

   BEGIN
    -- Función: NumeroDeReservasCliente
      DBMS_OUTPUT.PUT_LINE('======>INICIO FUNCIÓN: NumeroDeReservasCliente');
      DBMS_OUTPUT.NEW_LINE;
      DBMS_OUTPUT.PUT_LINE('    Resultado de NumeroDeReservasCliente("66655789K") = '
                            || NumeroDeReservasCliente('66655789K'));
      DBMS_OUTPUT.NEW_LINE;
      DBMS_OUTPUT.PUT_LINE('======>FIN FUNCIÓN: NumeroDeReservasCliente');
      DBMS_OUTPUT.NEW_LINE;
      DBMS_OUTPUT.NEW_LINE;
   EXCEPTION
        WHEN OTHERS THEN
            DBMS_OUTPUT.PUT_LINE('[EXCEPCIÓN]');
            DBMS_OUTPUT.PUT_LINE('[Código]: ' || SQLCODE);
            DBMS_OUTPUT.PUT_LINE('[Mensaje]: ' || SUBSTR(SQLERRM, 11, 100));
   END;

EXCEPTION
   WHEN OTHERS THEN
      DBMS_OUTPUT.PUT_LINE('[EXCEPCIÓN NO TRATADA EN EL BLOQUE PRINCIPAL]');
      DBMS_OUTPUT.PUT_LINE('[Código]: ' || SQLCODE);
      DBMS_OUTPUT.PUT_LINE('[Mensaje]: ' || SUBSTR(SQLERRM, 11, 100));
END;
/

SELECT * FROM CLIENTE_RESERVA_ESP_HOSPEDAJE;


/***************************************/
/* 10.- Bloque para prueba de Triggers */
/***************************************/

SELECT * FROM CLIENTE_PRIORITARIO; --tabla clientes prioritarios antes de pruebas de Triggers
SELECT * FROM HOTEL; --tabla hotel antes de pruebas de Triggers

SET SERVEROUTPUT ON
BEGIN
   DBMS_OUTPUT.NEW_LINE;

    -- PRUEBA Trigger cuenta_valida CASO EN EL QUE GENERA ERROR
    BEGIN
       DBMS_OUTPUT.NEW_LINE;

       DBMS_OUTPUT.PUT_LINE('======>PRUEBA DEL TRIGGER cuenta_valida [FALLARÁ] (ANTES)');
        DBMS_OUTPUT.PUT_LINE('  Intentamos introducir una persona...');
        INSERT INTO PERSONA(NUM_ID, NOMBRE, TELEFONO, FECHA_NACIMIENTO) VALUES ('71524488A', 'Marcos Rodríguez López', '654221356', '20/02/1992');
        DBMS_OUTPUT.PUT_LINE('  Conseguimos introducir la persona');
        DBMS_OUTPUT.PUT_LINE('  Intentamos introducir un empleado con un IBAN incorrecto...');
        INSERT INTO EMPLEADO(NUM_ID, ESPECIALIDAD, CUENTA_BANCO, ANHOS_EXPERIENCIA, ID_HOTEL, ID_PRACTICA_SUPERVISADA) VALUES ('71524488A', 'ATENCIÓN AL PÚBLICO', 'ES3100315882373748044941', 4, 'HOU220', NULL);
        DBMS_OUTPUT.PUT_LINE('  Conseguimos introducir el empleado (Fallo de trigger!)'); -- esta linea no se muestra si el trigger funciona adecuadamente
       DBMS_OUTPUT.PUT_LINE('======>PRUEBA DEL TRIGGER cuenta_valida (DESPUÉS)'); -- este texto no se visualizará porque se produce una excepción antes
    EXCEPTION
       WHEN OTHERS THEN
          DBMS_OUTPUT.PUT_LINE('[EXCEPCIÓN]');
          DBMS_OUTPUT.PUT_LINE('[Código]: ' || SQLCODE);
          DBMS_OUTPUT.PUT_LINE('[Mensaje]: ' || SUBSTR(SQLERRM, 11, 100));
    END;

    -- PRUEBA Trigger cuenta_valida CASO EN EL QUE NO GENERA ERROR
    BEGIN
       DBMS_OUTPUT.NEW_LINE;

       DBMS_OUTPUT.PUT_LINE('======>PRUEBA DEL TRIGGER [FUNCIONARÁ] cuenta_valida (ANTES)');
        DBMS_OUTPUT.PUT_LINE('  Intentamos introducir un empleado con un IBAN correcto...');
        INSERT INTO EMPLEADO(NUM_ID, ESPECIALIDAD, CUENTA_BANCO, ANHOS_EXPERIENCIA, ID_HOTEL, ID_PRACTICA_SUPERVISADA) VALUES ('71524488A', 'ATENCIÓN AL PÚBLICO', 'ES3100315882373728044941', 4, 'HOU220', NULL);
        DBMS_OUTPUT.PUT_LINE('  Conseguimos introducir el empleado');
       DBMS_OUTPUT.PUT_LINE('======>PRUEBA DEL TRIGGER cuenta_valida (DESPUÉS)');
    EXCEPTION
       WHEN OTHERS THEN
          DBMS_OUTPUT.PUT_LINE('[EXCEPCIÓN]');
          DBMS_OUTPUT.PUT_LINE('[Código]: ' || SQLCODE);
          DBMS_OUTPUT.PUT_LINE('[Mensaje]: ' || SUBSTR(SQLERRM, 11, 100));
    END;

    -- PRUEBA Trigger cliente_prioritario_empleado
    BEGIN
       DBMS_OUTPUT.NEW_LINE;

       DBMS_OUTPUT.PUT_LINE('======>PRUEBA DEL TRIGGER cliente_prioritario_empleado (ANTES)');
           DBMS_OUTPUT.PUT_LINE('  Intentamos introducir un empleado que ya es huésped y cliente...');
           INSERT INTO EMPLEADO(NUM_ID, ESPECIALIDAD, CUENTA_BANCO, ANHOS_EXPERIENCIA, ID_HOTEL, ID_PRACTICA_SUPERVISADA) VALUES ('23465138Z', 'ATENCIÓN AL PÚBLICO', 'ES1701288369169937338266', 2, 'HOU220', NULL);
           DBMS_OUTPUT.PUT_LINE('  Conseguimos introducir el empleado (Visualizar tabla clientes prioritarios al final de la ejecución.)');
       DBMS_OUTPUT.PUT_LINE('======>PRUEBA DEL TRIGGER cliente_prioritario_empleado (DESPUÉS)');
    EXCEPTION
       WHEN OTHERS THEN
          DBMS_OUTPUT.PUT_LINE('[EXCEPCIÓN]');
          DBMS_OUTPUT.PUT_LINE('[Código]: ' || SQLCODE);
          DBMS_OUTPUT.PUT_LINE('[Mensaje]: ' || SUBSTR(SQLERRM, 11, 100));
    END;

    -- PRUEBA Trigger cliente_prioritario_cliente
    BEGIN
       DBMS_OUTPUT.NEW_LINE;

       DBMS_OUTPUT.PUT_LINE('======>PRUEBA DEL TRIGGER cliente_prioritario_cliente (ANTES)');
        DBMS_OUTPUT.PUT_LINE('  Intentamos introducir un cliente y huesped que ya es empleado...');
        INSERT INTO CLIENTE(ID_CLIENTE, FECHA_PRIMER_CONTRATO) VALUES ('CLI01234', '08/10/2015');
        INSERT INTO HUESPED(NUM_ID, ID_CLIENTE, NACIONALIDAD, NUM_TARJETA) VALUES ('65489481B','CLI01234','España','557789332312894567');
        DBMS_OUTPUT.PUT_LINE('  Conseguimos introducirlo (Visualizar tabla clientes prioritarios al final de la ejecución.)');
       DBMS_OUTPUT.PUT_LINE('======>PRUEBA DEL TRIGGER cliente_prioritario_cliente (DESPUÉS)');
    EXCEPTION
       WHEN OTHERS THEN
          DBMS_OUTPUT.PUT_LINE('[EXCEPCIÓN]');
          DBMS_OUTPUT.PUT_LINE('[Código]: ' || SQLCODE);
          DBMS_OUTPUT.PUT_LINE('[Mensaje]: ' || SUBSTR(SQLERRM, 11, 100));
    END;

    -- PRUEBA Trigger min_hotel_cadenaHotelera
    BEGIN
       DBMS_OUTPUT.NEW_LINE;

       DBMS_OUTPUT.PUT_LINE('======>PRUEBA DEL TRIGGER min_hotel_cadenaHotelera (ANTES)');
        DBMS_OUTPUT.PUT_LINE('  Intentamos borrar todos los hoteles de la cadena....');
        DELETE FROM HOTEL;
        DBMS_OUTPUT.PUT_LINE('  Lo conseguimos (fallo en el trigger!))'); -- A partir de esta línea, no debería ejecutarse si el trigger funciona.
       DBMS_OUTPUT.PUT_LINE('======>PRUEBA DEL TRIGGER min_hotel_cadenaHotelera (DESPUÉS)');
    EXCEPTION
       WHEN OTHERS THEN
          DBMS_OUTPUT.PUT_LINE('[EXCEPCIÓN]');
          DBMS_OUTPUT.PUT_LINE('[Código]: ' || SQLCODE);
          DBMS_OUTPUT.PUT_LINE('[Mensaje]: ' || SUBSTR(SQLERRM, 11, 100));
    END;
END;
/

SELECT * FROM CLIENTE_PRIORITARIO; --tabla clientes prioritarios tras pruebas de Triggers
SELECT * FROM HOTEL; --tabla hotel tras pruebas de Triggers
